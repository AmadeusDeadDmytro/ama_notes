[{"D:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts":"1","D:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts":"2","D:\\Web\\Pet\\ama_notes\\src\\containers\\Navigation.tsx":"3","D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx":"4","D:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts":"5","D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx":"6","D:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts":"7","D:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx":"8","D:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts":"9","D:\\Web\\Pet\\ama_notes\\src\\componets\\App.tsx":"10","D:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts":"11","D:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts":"12","D:\\Web\\Pet\\ama_notes\\src\\index.tsx":"13","E:\\Web\\Pet\\ama_notes\\src\\index.tsx":"14","E:\\Web\\Pet\\ama_notes\\src\\reducers\\index.ts":"15","E:\\Web\\Pet\\ama_notes\\src\\sagas\\index.ts":"16","E:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx":"17","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx":"18","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx":"19","E:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts":"20","E:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts":"21","E:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts":"22","E:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts":"23","E:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts":"24","E:\\Web\\Pet\\ama_notes\\src\\api\\index.ts":"25","E:\\Web\\Pet\\ama_notes\\src\\constants\\codeMirrorOptions.ts":"26","E:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts":"27","E:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts":"28","E:\\Web\\Pet\\ama_notes\\src\\containers\\App.tsx":"29","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteOptions.tsx":"30","E:\\Web\\Pet\\ama_notes\\src\\constants\\index.ts":"31","E:\\Web\\Pet\\ama_notes\\src\\contexts\\KeyboardContext.tsx":"32","E:\\Web\\Pet\\ama_notes\\src\\containers\\KeyboardShortcuts.tsx":"33","E:\\Web\\Pet\\ama_notes\\src\\helpers\\hooks.ts":"34"},{"size":3180,"mtime":1609785928423,"results":"35","hashOfConfig":"36"},{"size":1497,"mtime":1609694531928,"results":"37","hashOfConfig":"36"},{"size":3230,"mtime":1609787249723,"results":"38","hashOfConfig":"36"},{"size":2737,"mtime":1609856010314,"results":"39","hashOfConfig":"36"},{"size":818,"mtime":1609622652667,"results":"40","hashOfConfig":"36"},{"size":8252,"mtime":1609856062059,"results":"41","hashOfConfig":"36"},{"size":5651,"mtime":1609787691005,"results":"42","hashOfConfig":"36"},{"size":8235,"mtime":1609787205725,"results":"43","hashOfConfig":"36"},{"size":473,"mtime":1609783732431,"results":"44","hashOfConfig":"36"},{"size":1338,"mtime":1609856297958,"results":"45","hashOfConfig":"36"},{"size":1048,"mtime":1609786308827,"results":"46","hashOfConfig":"36"},{"size":1238,"mtime":1609856246554,"results":"47","hashOfConfig":"36"},{"size":767,"mtime":1609362001538,"results":"48","hashOfConfig":"36"},{"size":768,"mtime":1610025048364,"results":"49","hashOfConfig":"50"},{"size":502,"mtime":1609361809731,"results":"51","hashOfConfig":"50"},{"size":1223,"mtime":1609362448208,"results":"52","hashOfConfig":"50"},{"size":12109,"mtime":1610054316993,"results":"53","hashOfConfig":"50"},{"size":9110,"mtime":1610055264403,"results":"54","hashOfConfig":"50"},{"size":2805,"mtime":1610052943459,"results":"55","hashOfConfig":"50"},{"size":1498,"mtime":1609785928906,"results":"56","hashOfConfig":"50"},{"size":6373,"mtime":1610052042433,"results":"57","hashOfConfig":"50"},{"size":818,"mtime":1609622652667,"results":"58","hashOfConfig":"50"},{"size":1099,"mtime":1610041228391,"results":"59","hashOfConfig":"50"},{"size":3302,"mtime":1610042091950,"results":"60","hashOfConfig":"50"},{"size":1249,"mtime":1609362447771,"results":"61","hashOfConfig":"50"},{"size":219,"mtime":1610052943139,"results":"62","hashOfConfig":"50"},{"size":381,"mtime":1610055282483,"results":"63","hashOfConfig":"50"},{"size":1785,"mtime":1610043723546,"results":"64","hashOfConfig":"50"},{"size":1445,"mtime":1610054487490,"results":"65","hashOfConfig":"50"},{"size":2717,"mtime":1610043176175,"results":"66","hashOfConfig":"50"},{"size":156,"mtime":1610042828229,"results":"67","hashOfConfig":"50"},{"size":970,"mtime":1610055035566,"results":"68","hashOfConfig":"50"},{"size":2924,"mtime":1610055095492,"results":"69","hashOfConfig":"50"},{"size":978,"mtime":1610055035644,"results":"70","hashOfConfig":"50"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j5cugq",{"filePath":"73","messages":"74","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"75","messages":"76","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"77","usedDeprecatedRules":"78"},{"filePath":"79","messages":"80","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"81"},{"filePath":"82","messages":"83","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"86","messages":"87","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"94","messages":"95","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},"19u8yaq",{"filePath":"104","messages":"105","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"106","messages":"107","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"108","usedDeprecatedRules":"103"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"111","usedDeprecatedRules":"103"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"103"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"103"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"103"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"103"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"103"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"146","messages":"147","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\containers\\Navigation.tsx",["150"],"import { ApplicationState, CategoryItem, NoteItem } from 'types'\nimport { addNote, deleteNote, sendNoteToTrash, swapNote, syncState } from 'actions'\nimport { downloadNote, getNoteTitle } from 'helpers'\n\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport styled from 'styled-components'\nimport { v4 as uuid } from 'uuid'\n\ninterface NavigationProps {\n    addNote: (note: NoteItem) => void\n    swapNote: (noteId: string) => void\n    sendNoteToTrash: (noteId: string) => void\n    syncState: (notes: NoteItem[], categories: CategoryItem[]) => void\n    activeNote?: NoteItem\n    notes: NoteItem[]\n    categories: CategoryItem[]\n    syncing: boolean\n}\n\nconst Navigation: React.FC<NavigationProps> = ({ addNote, activeNote, sendNoteToTrash, swapNote, syncState, notes, syncing, categories }) => {\n    const newNoteHandler = () => {\n        const note: NoteItem = {\n            id: uuid(),\n            text: '',\n            created: moment().format(),\n            lastUpdated: moment().format(),\n        }\n\n        if ((activeNote && activeNote.text !== '') || !activeNote) {\n            addNote(note)\n            swapNote(note.id)\n        }\n    }\n\n    const trashNoteHandler = () => {\n        if (activeNote && !activeNote.trash) {\n            sendNoteToTrash(activeNote.id)\n        }\n    }\n\n    const syncNoteHandler = () => {\n        syncState(notes, categories)\n    }\n\n    const downloadHandler = () => {\n        if (activeNote) {\n            downloadNote(getNoteTitle(activeNote.text), activeNote)\n        }\n    }\n\n    return (\n        <NavigationContainer>\n            <NavButton onClick={newNoteHandler}>+ Новая запись</NavButton>\n            <NavButton onClick={trashNoteHandler}>x Удалить запись</NavButton>\n            <NavButton onClick={downloadHandler}>^ Скачать запись</NavButton>\n            <NavButton onClick={syncNoteHandler}>\n                Синхронизировать записи\n                {syncing && 'Синхронизация...'}\n            </NavButton>\n        </NavigationContainer>\n    )\n}\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    syncing: state.syncState.syncing,\n    notes: state.noteState.notes,\n    categories: state.categoryState.categories,\n    activeNote: state.noteState.notes.find((note) => note.id === state.noteState.activeNoteId),\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    addNote: (note: NoteItem) => dispatch(addNote(note)),\n    swapNote: (noteId: string) => dispatch(swapNote(noteId)),\n    sendNoteToTrash: (noteId: string) => dispatch(sendNoteToTrash(noteId)),\n    syncState: (notes: NoteItem[], categories: CategoryItem[]) => dispatch(syncState(notes, categories)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation)\n\nconst NavButton = styled.button`\n    display: block;\n    cursor: pointer;\n    background: transparent;\n    font-weight: 600;\n    border: none;\n    font-size: 1rem;\n\n    &:hover {\n        background: ${Colors.HOVER};\n    }\n`\n\nconst NavigationContainer = styled.div`\n    grid-area: nav;\n    background: ${Colors.BACKGROUND};\n    display: flex;\n`\n",["151","152"],"D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx",["153"],"import 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/base16-light.css'\nimport 'codemirror/mode/gfm/gfm.js'\nimport 'codemirror/addon/selection/active-line.js'\n\nimport { ApplicationState, NoteItem } from 'types'\n\nimport { Controlled as CodeMirror } from 'react-codemirror2'\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport options from 'constants/codeMirrorOptions'\nimport styled from 'styled-components'\nimport { updateNote } from 'actions'\n\ninterface NoteEditorProps {\n    loading: boolean\n    activeNote?: NoteItem\n    updateNote: (note: NoteItem) => void\n}\n\nconst NoteEditor: React.FC<NoteEditorProps> = ({ loading, activeNote, updateNote }) => {\n    if (loading) {\n        return <EmptyEditor>Загрузка...</EmptyEditor>\n    } else if (!activeNote) {\n        return <EmptyEditorCenter />\n    } else {\n        return (\n            <Editor\n                className=\"mousetrap\"\n                value={activeNote.text}\n                options={options}\n                editorDidMount={(editor) => {\n                    editor.focus()\n                }}\n                onBeforeChange={(editor, data, value) => {\n                    updateNote({\n                        id: activeNote.id,\n                        text: value,\n                        created: activeNote.created,\n                        lastUpdated: moment().format(),\n                    })\n                }}\n                onChange={(editor, data, value) => {\n                    editor.focus()\n                }}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    loading: state.noteState.loading,\n    activeNote: state.noteState.notes.find((note) => note.id === state.noteState.activeNoteId),\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    updateNote: (note: NoteItem) => dispatch(updateNote(note)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteEditor)\n\nconst EmptyEditor = styled.div`\n    grid-area: editor;\n    max-height: calc(100vh - 25px);\n    overflow-y: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst EmptyEditorCenter = styled(EmptyEditor)`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst Editor = styled(CodeMirror)`\n    grid-area: editor;\n\n    .CodeMirror {\n        -webkit-font-smoothing: subpixel-antialiased;\n        height: 100%;\n        font-family: Menlo, Monaco, monospace;\n        font-weight: 500;\n        font-size: 15px;\n        line-height: 1.5;\n    }\n\n    .CodeMirror-activeline-background {\n        background: rgba(0, 0, 0, 0.05) !important;\n    }\n`\n","D:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts",["154"],"D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx",["155","156"],"D:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts",["157","158"],"D:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx",["159","160","161","162"],"D:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\componets\\App.tsx",["163"],"D:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\index.tsx",[],["164","165"],"E:\\Web\\Pet\\ama_notes\\src\\index.tsx",[],["166","167"],"E:\\Web\\Pet\\ama_notes\\src\\reducers\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\sagas\\index.ts",["168"],"import { all, put, take, takeLatest } from 'redux-saga/effects'\nimport { loadCategoriesError, loadCategoriesSuccess, loadNotesError, loadNotesSuccess, syncStateError, syncStateSuccess } from 'actions'\nimport { requestCategories, requestNotes, saveState } from 'api'\n\nimport { Actions } from 'constants/enums'\nimport { SyncStateAction } from 'types/index'\n\nfunction* fetchNotes() {\n    try {\n        const notes = yield requestNotes()\n        yield put(loadNotesSuccess(notes))\n    } catch (error) {\n        yield put(loadNotesError(error))\n    }\n}\n\nfunction* fetchCategories() {\n    try {\n        const categories = yield requestCategories()\n        yield put(loadCategoriesSuccess(categories))\n    } catch (error) {\n        yield put(loadCategoriesError(error))\n    }\n}\n\nfunction* postState({ payload: { notes, categories } }: SyncStateAction) {\n    try {\n        yield saveState(notes, categories)\n\n        yield put(syncStateSuccess())\n    } catch (error) {\n        yield put(syncStateError(error))\n    }\n}\n\nexport function* allSaga() {\n    yield all([takeLatest(Actions.LOAD_NOTES, fetchNotes), takeLatest(Actions.LOAD_CATEGORIES, fetchCategories), takeLatest(Actions.SYNC_STATE, postState)])\n}\n\nexport default allSaga\n","E:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx",["169","170","171","172","173"],"import { ApplicationState, CategoryItem, NoteItem } from 'types'\nimport { Book, Bookmark, Folder, Plus, Settings, Trash2, UploadCloud, X } from 'react-feather'\nimport React, { useState } from 'react'\nimport { addCategory, addNote, deleteCategory, pruneCategoryFromNotes, swapCategory, swapFolder, swapNote, syncState } from 'actions'\n\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport { Folders } from 'constants/enums'\nimport { connect } from 'react-redux'\nimport kebabCase from 'lodash/kebabCase'\nimport { newNote } from 'helpers'\nimport styled from 'styled-components'\nimport { useKeyboard } from 'contexts/KeyboardContext'\n\nconst iconColor = 'rgba(255, 255, 255, 0.3)'\n\ninterface AppProps {\n    addNote: (note: NoteItem) => void\n    addCategory: (category: CategoryItem) => void\n    deleteCategory: (categoryId: string) => void\n    pruneCategoryFromNotes: (categoryId: string) => void\n    swapCategory: (categoryId: string) => void\n    swapFolder: (folder: string) => void\n    swapNote: (swapNote: string) => void\n    syncState: (notes: NoteItem[], categories: CategoryItem[]) => void\n    activeNote?: NoteItem\n    notes: NoteItem[]\n    categories: CategoryItem[]\n    activeCategoryId: string\n    activeFolder: string\n}\n\nconst AppSidebar: React.FC<AppProps> = ({\n    addNote,\n    activeNote,\n    syncState,\n    addCategory,\n    deleteCategory,\n    pruneCategoryFromNotes,\n    swapCategory,\n    swapFolder,\n    swapNote,\n    notes,\n    categories,\n    activeCategoryId,\n    activeFolder,\n}) => {\n    const { addingTempCategory, setAddingTempCategory } = useKeyboard()\n    const [tempCategory, setTempCategory] = useState('')\n\n    const newTempCategoryHandler = () => {\n        !addingTempCategory && setAddingTempCategory(true)\n    }\n\n    const onSubmit = (event: React.FormEvent<HTMLFormElement> | React.FocusEvent<HTMLInputElement>) => {\n        event.preventDefault()\n\n        const category = { id: kebabCase(tempCategory), name: tempCategory }\n\n        if (!categories.find((cat) => cat.id === kebabCase(tempCategory))) {\n            addCategory(category)\n            setTempCategory('')\n            setAddingTempCategory(false)\n        }\n    }\n\n    const newNoteHandler = () => {\n        if ((activeNote && activeNote.text !== '') || !activeNote) {\n            const note = newNote(activeCategoryId, activeFolder)\n\n            addNote(note)\n            swapNote(note.id)\n        }\n    }\n\n    const syncNotesHandler = () => {\n        syncState(notes, categories)\n    }\n\n    return (\n        <AppSidebarContainer>\n            <AppSidebarMain>\n                <AppSidebarLink onClick={() => swapFolder(Folders.ALL)} active={activeFolder === Folders.ALL}>\n                    <Book size={15} style={{ marginRight: '.5rem' }} color={iconColor} />\n                    Все заметки\n                </AppSidebarLink>\n                <AppSidebarLink onClick={() => swapFolder(Folders.FAVORITES)} active={activeFolder === Folders.FAVORITES}>\n                    <Bookmark size={15} style={{ marginRight: '.5rem' }} color={iconColor} />\n                    Избранные\n                </AppSidebarLink>\n                <AppSidebarLink onClick={() => swapFolder(Folders.TRASH)} active={activeFolder === Folders.TRASH}>\n                    <Trash2 size={15} style={{ marginRight: '.5rem' }} color={iconColor} />\n                    Корзина\n                </AppSidebarLink>\n\n                <CategoryTitle>\n                    <CategoryTitleH2>Категории</CategoryTitleH2>\n                    <AddCategoryButton onClick={newTempCategoryHandler}>\n                        <Plus size={15} color={iconColor} />\n                    </AddCategoryButton>\n                </CategoryTitle>\n\n                <CategoryListContainer>\n                    {categories.map((category) => {\n                        return (\n                            <CategoryEach\n                                key={category.id}\n                                active={category.id === activeCategoryId}\n                                onClick={() => {\n                                    const notesForNewCategory = notes.filter((note) => !note.trash && note.category === category.id)\n                                    const newNoteId = notesForNewCategory.length > 0 ? notesForNewCategory[0].id : ''\n\n                                    if (category.id !== activeCategoryId) {\n                                        swapCategory(category.id)\n                                        swapNote(newNoteId)\n                                    }\n                                }}\n                            >\n                                <CategoryEachName>\n                                    <Folder size={15} style={{ marginRight: '.5rem' }} color={iconColor} />\n                                    {category.name}\n                                </CategoryEachName>\n                                <CategoryOptions\n                                    onClick={() => {\n                                        const notesNotTrash = notes.filter((note) => !note.trash)\n                                        const newNoteId = notesNotTrash.length > 0 ? notesNotTrash[0].id : ''\n\n                                        deleteCategory(category.id)\n                                        pruneCategoryFromNotes(category.id)\n                                        swapFolder(Folders.ALL)\n                                        swapNote(newNoteId)\n                                    }}\n                                >\n                                    <X size={12} />\n                                </CategoryOptions>\n                            </CategoryEach>\n                        )\n                    })}\n                </CategoryListContainer>\n\n                {addingTempCategory && (\n                    <AddCategoryForm onSubmit={onSubmit}>\n                        <CategoryNameInput\n                            placeholder=\"Имя категории...\"\n                            autoFocus\n                            onChange={(event) => {\n                                setTempCategory(event.target.value)\n                            }}\n                            onBlur={(event) => {\n                                if (!tempCategory) {\n                                    setAddingTempCategory(false)\n                                } else {\n                                    onSubmit(event)\n                                }\n                            }}\n                        />\n                    </AddCategoryForm>\n                )}\n                <AppSidebarActions onClick={syncNotesHandler}>\n                    <ActionButton onClick={newNoteHandler}>\n                        <Plus size={18} style={{ marginRight: '.5rem' }} color={iconColor} />\n                        {/* <AppSidebarActionsH1>Новая заметка</AppSidebarActionsH1> */}\n                    </ActionButton>\n                    <ActionButton onClick={syncNotesHandler}>\n                        <UploadCloud size={18} style={{ marginRight: '.5rem' }} color={iconColor} />\n                        {/* <AppSidebarActionsH1>Синхронизировать</AppSidebarActionsH1> */}\n                    </ActionButton>\n                    <ActionButton>\n                        <Settings size={18} style={{ marginRight: '.5rem' }} color={iconColor} />\n                        {/* <AppSidebarActionsH1>Настройки</AppSidebarActionsH1> */}\n                    </ActionButton>\n                </AppSidebarActions>\n            </AppSidebarMain>\n        </AppSidebarContainer>\n    )\n}\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    activeNote: state.noteState.notes.find((note) => note.id === state.noteState.activeNoteId),\n    activeFolder: state.noteState.activeFolder,\n    activeCategoryId: state.noteState.activeCategoryId,\n    categories: state.categoryState.categories,\n    notes: state.noteState.notes,\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    addNote: (note: NoteItem) => dispatch(addNote(note)),\n    swapNote: (noteId: string) => dispatch(swapNote(noteId)),\n    swapCategory: (categoryId: string) => dispatch(swapCategory(categoryId)),\n    swapFolder: (folder: string) => dispatch(swapFolder(folder)),\n    addCategory: (category: CategoryItem) => dispatch(addCategory(category)),\n    deleteCategory: (categoryId: string) => dispatch(deleteCategory(categoryId)),\n    pruneCategoryFromNotes: (categoryId: string) => dispatch(pruneCategoryFromNotes(categoryId)),\n    syncState: (notes: NoteItem[], categories: CategoryItem[]) => dispatch(syncState(notes, categories)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppSidebar)\n\nconst AppSidebarActions = styled.div`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin-bottom: 1rem;\n    flex-wrap: wrap;\n`\n\nconst AppSidebarActionsH1 = styled.h1`\n    font-size: 1.05rem;\n    font-weight: 700;\n    margin: 0;\n`\n\nconst ActionButton = styled.div`\n    svg {\n        cursor: pointer;\n        display: flex;\n        align-items: center;\n        justify-content: center;\n        background: ${Colors.A_COLOR_SEVEN};\n        padding: 0.7rem;\n        border-radius: 50%;\n        stroke: rgba(255, 255, 255, 0.7);\n        margin: 0 0.25rem;\n\n        &:hover {\n            stroke: ${Colors.A_COLOR_EIGHT};\n            background: ${Colors.A_COLOR_FOUR};\n        }\n    }\n`\n\nconst AppSidebarContainer = styled.aside`\n    padding: 1rem 0 0.25rem;\n    grid-area: app-sidebar;\n    background: ${Colors.A_COLOR_FOUR};\n    color: rgba(255, 255, 255, 0.8);\n    display: flex;\n    flex-direction: column;\n`\n\nconst AppSidebarLink = styled.div<{ active?: boolean }>`\n    display: flex;\n    align-items: center;\n    padding: 0 0.5rem;\n    cursor: pointer;\n    font-size: 0.9rem;\n    font-weight: 600;\n    background: ${({ active }) => (active ? Colors.A_COLOR_SEVEN : '')};\n\n    &:hover {\n        background: ${Colors.A_COLOR_THREE};\n    }\n`\n\nconst AppSidebarMain = styled.section`\n    flex: 1;\n`\n\nconst Title = styled.h1`\n    font-size: 1.3rem;\n    padding: 0.5rem;\n    margin: 0;\n`\nconst AllNotes = styled.p`\n    padding: 0 0.5rem;\n`\nconst CategoryTitle = styled.div`\n    margin-top: 1rem;\n    padding: 0.5rem;\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n`\n\nconst CategoryTitleH2 = styled.h2`\n    margin: 0;\n    color: ${Colors.A_COLOR_ONE};\n    text-transform: uppercase;\n    font-size: 0.7rem;\n`\n\nconst AppSidebarButton = styled.section`\n    width: 100%;\n    align-self: flex-end;\n`\n\nconst AddButton = styled.button`\n    cursor: pointer;\n    -webkit-appearance: none;\n    padding: 0 0.5rem;\n    color: rgba(255, 255, 255, 0.8);\n    background: transparent;\n    font-size: 1rem;\n    border: none;\n    line-height: 1;\n`\n\nconst AddCategoryButton = styled.button`\n    cursor: pointer;\n    -webkit-appearance: none;\n    padding: 0;\n    color: rgba(255, 255, 255, 0.8);\n    background: transparent;\n    font-size: 1rem;\n    border: none;\n    line-height: 1;\n\n    svg:hover {\n        stroke: white;\n    }\n`\n\nconst CategoryListContainer = styled.div`\n    font-size: 0.9rem;\n`\n\nconst CategoryOptions = styled.div`\n    color: transparent;\n    z-index: 1;\n    cursor: pointer;\n`\n\nconst CategoryEach = styled.div<{ active: boolean }>`\n    cursor: pointer;\n    padding: 0.5rem;\n    color: rgba(255, 255, 255, 0.8);\n    background: ${({ active }) => active && Colors.A_COLOR_SEVEN};\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    &:last-of-type {\n        border-bottom: none;\n    }\n\n    &:hover {\n        background: ${Colors.A_COLOR_THREE};\n\n        ${CategoryOptions} {\n            color: ${Colors.A_COLOR_FIVE};\n        }\n    }\n`\n\nconst AddCategoryForm = styled.form``\n\nconst CategoryNameInput = styled.input`\n    background: rgba(0, 0, 0, 0.5);\n    border: 1px solid ${Colors.A_COLOR_ONE};\n    padding: 0.5rem;\n    font-size: 0.9rem;\n    -webkit-appearance: none;\n    color: ${Colors.A_COLOR_TWO};\n`\n\nconst CategoryEachName = styled.div`\n    display: flex;\n    align-items: center;\n`\n","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx",["174"],"E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx",["175"],"import 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/base16-light.css'\nimport 'codemirror/mode/gfm/gfm.js'\nimport 'codemirror/addon/selection/active-line.js'\n\nimport { ApplicationState, NoteItem } from 'types'\n\nimport { Controlled as CodeMirror } from 'react-codemirror2'\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport options from 'constants/codeMirrorOptions'\nimport styled from 'styled-components'\nimport { updateNote } from 'actions'\n\ninterface NoteEditorProps {\n    loading: boolean\n    activeNote?: NoteItem\n    updateNote: (note: NoteItem) => void\n}\n\nconst NoteEditor: React.FC<NoteEditorProps> = ({ loading, activeNote, updateNote }) => {\n    if (loading) {\n        return <EmptyEditor>Загрузка...</EmptyEditor>\n    } else if (!activeNote) {\n        return <EmptyEditorCenter />\n    } else {\n        return (\n            <Editor\n                className=\"mousetrap\"\n                value={activeNote.text}\n                options={options}\n                editorDidMount={(editor) => {}}\n                onBeforeChange={(editor, data, value) => {\n                    updateNote({\n                        id: activeNote.id,\n                        text: value,\n                        created: activeNote.created,\n                        lastUpdated: moment().format(),\n                    })\n                }}\n                onChange={(editor, data, value) => {\n                    if (activeNote && activeNote.text === '') {\n                        editor.focus()\n                    }\n                }}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    loading: state.noteState.loading,\n    activeNote: state.noteState.notes.find((note) => note.id === state.noteState.activeNoteId),\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    updateNote: (note: NoteItem) => dispatch(updateNote(note)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteEditor)\n\nconst EmptyEditor = styled.div`\n    grid-area: editor;\n    max-height: calc(100vh - 25px);\n    overflow-y: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst EmptyEditorCenter = styled(EmptyEditor)`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst Editor = styled(CodeMirror)`\n    grid-area: editor;\n\n    .CodeMirror {\n        -webkit-font-smoothing: subpixel-antialiased;\n        height: 100%;\n        font-family: Menlo, Monaco, monospace;\n        font-weight: 500;\n        font-size: 15px;\n        line-height: 1.5;\n        padding-left: 0.5rem;\n    }\n\n    .CodeMirror-activeline-background {\n        background: rgba(0, 0, 0, 0.05) !important;\n    }\n`\n","E:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts",["176","177"],"import { Actions, Folders } from 'constants/enums'\nimport { NoteItem, NoteState, NotesActionTypes } from 'types'\n\nimport { loadNotes } from './../actions/index'\nimport { sortByLastUpdated } from 'helpers'\nimport { v4 as uuid } from 'uuid'\n\nconst initialState: NoteState = {\n    notes: [],\n    activeNoteId: '',\n    activeFolder: 'ALL',\n    activeCategoryId: '',\n    error: '',\n    loading: true,\n}\n\nconst noteReducer = (state = initialState, action: NotesActionTypes): NoteState => {\n    switch (action.type) {\n        case Actions.LOAD_NOTES:\n            return initialState\n        case Actions.LOAD_NOTES_SUCCESS:\n            return {\n                ...state,\n                notes: action.payload,\n                activeNoteId: getFirstNote(Folders.ALL, action.payload),\n                loading: false,\n            }\n        case Actions.LOAD_NOTES_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload,\n            }\n        case Actions.SWAP_NOTE:\n            return {\n                ...state,\n                activeNoteId: action.payload,\n            }\n        case Actions.SWAP_CATEGORY:\n            return {\n                ...state,\n                activeCategoryId: action.payload,\n                activeFolder: Folders.CATEGORY,\n                activeNoteId: getFirstNote(Folders.CATEGORY, state.notes, action.payload),\n            }\n        case Actions.SWAP_FOLDER:\n            return {\n                ...state,\n                activeFolder: action.payload,\n                activeCategoryId: '',\n                activeNoteId: getFirstNote(action.payload, state.notes),\n            }\n        case Actions.PRUNE_NOTES:\n            return {\n                ...state,\n                notes: state.notes.filter((note) => note.text !== '' || note.id === state.activeNoteId),\n            }\n        case Actions.ADD_NOTE:\n            return {\n                ...state,\n                notes: [...state.notes, action.payload],\n            }\n        case Actions.UPDATE_NOTE:\n            return {\n                ...state,\n                notes: state.notes.map((note) => {\n                    if (note.id === action.payload.id) {\n                        return {\n                            ...note,\n                            text: action.payload.text,\n                            lastUpdated: action.payload.lastUpdated,\n                        }\n                    } else {\n                        return note\n                    }\n                }),\n            }\n        case Actions.TOGGLE_FAVORITE_NOTE:\n            return {\n                ...state,\n                notes: state.notes.map((note) => {\n                    if (note.id === action.payload) {\n                        return {\n                            ...note,\n                            favorite: !note.favorite,\n                        }\n                    } else {\n                        return note\n                    }\n                }),\n            }\n        case Actions.SEND_NOTE_TO_TRASH:\n            return {\n                ...state,\n                notes: state.notes.map((note) => {\n                    if (note.id === action.payload) {\n                        return {\n                            ...note,\n                            trash: true,\n                        }\n                    } else {\n                        return note\n                    }\n                }),\n                activeNoteId: getNewNoteId(state.notes, action.payload, state.activeCategoryId),\n            }\n        case Actions.DELETE_NOTE:\n            return {\n                ...state,\n                notes: state.notes.filter((note) => note.id !== action.payload),\n                activeNoteId: getNewNoteId(state.notes, action.payload, state.activeCategoryId),\n            }\n        case Actions.PRUNE_CATEGORY_FROM_NOTES:\n            return {\n                ...state,\n                notes: state.notes.map((note) => {\n                    if (note.category === action.payload) {\n                        return {\n                            ...note,\n                            category: undefined,\n                        }\n                    } else {\n                        return note\n                    }\n                }),\n            }\n        case Actions.ADD_CATEGORY_TO_NOTE:\n            return {\n                ...state,\n                notes: state.notes.map((note) => {\n                    if (note.id === action.payload.noteId) {\n                        return {\n                            ...note,\n                            category: action.payload.categoryId,\n                        }\n                    } else {\n                        return note\n                    }\n                }),\n            }\n        default:\n            return state\n    }\n}\n\nexport default noteReducer\n\nexport function getFirstNote(folder: string, notes: NoteItem[], categoryId?: string): string {\n    const notesNotTrash = notes.filter((note) => !note.trash).sort(sortByLastUpdated)\n    const firstNoteCategory = notesNotTrash.find((note) => note.category === categoryId)\n    const firstNoteFavorite = notesNotTrash.find((note) => note.favorite)\n    const firstNoteTrash = notes.find((note) => note.trash)\n\n    switch (folder) {\n        case Folders.CATEGORY:\n            return firstNoteCategory ? firstNoteCategory.id : ''\n        case Folders.FAVORITES:\n            return firstNoteFavorite ? firstNoteFavorite.id : ''\n        case Folders.TRASH:\n            return firstNoteTrash ? firstNoteTrash.id : ''\n        case Folders.ALL:\n            return notesNotTrash.length > 0 ? notesNotTrash[0].id : ''\n        default:\n            return ''\n    }\n}\n\nexport function getNewNoteId(notes: NoteItem[], oldNoteId: string, activeCategoryId: string): string {\n    const notesNotTrash = activeCategoryId ? notes.filter((note) => !note.trash && note.category === activeCategoryId) : notes.filter((note) => !note.trash)\n    const deletedNoteIndex = notesNotTrash.findIndex((note) => note.id === oldNoteId)\n    let newActiveNoteId = ''\n\n    if (deletedNoteIndex === 0 && notesNotTrash[1]) {\n        newActiveNoteId = notesNotTrash[deletedNoteIndex + 1].id\n    } else if (notesNotTrash[deletedNoteIndex - 1]) {\n        newActiveNoteId = notesNotTrash[deletedNoteIndex - 1].id\n    }\n\n    return newActiveNoteId\n}\n","E:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts",["178"],"import { SyncState, SyncStateActionTypes } from 'types'\r\n\r\nimport { Actions } from 'constants/enums'\r\n\r\nconst initialState = {\r\n    syncing: false,\r\n    error: '',\r\n}\r\n\r\nconst syncReducer = (state = initialState, action: SyncStateActionTypes): SyncState => {\r\n    switch (action.type) {\r\n        default:\r\n        case Actions.SYNC_STATE:\r\n            return {\r\n                ...state,\r\n                syncing: true,\r\n            }\r\n        case Actions.SYNC_STATE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                syncing: false,\r\n            }\r\n        case Actions.SYNC_STATE_ERROR:\r\n            return {\r\n                ...state,\r\n                syncing: false,\r\n                error: action.payload,\r\n            }\r\n            return state\r\n    }\r\n}\r\n\r\nexport default syncReducer\r\n","E:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\api\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\constants\\codeMirrorOptions.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\containers\\App.tsx",["179"],"import React, { useEffect } from 'react'\nimport { loadCategories, loadNotes } from 'actions'\n\nimport AppSidebar from 'containers/AppSidebar'\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport { KeyboardProvider } from 'contexts/KeyboardContext'\nimport KeyboardShortcuts from 'containers/KeyboardShortcuts'\nimport NoteEditor from 'containers/NoteEditor'\nimport NoteList from 'containers/NoteList'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\ninterface AppProps {\n    loadNotes: () => void\n    loadCategories: () => void\n}\n\nconst App: React.FC<AppProps> = ({ loadNotes, loadCategories }) => {\n    useEffect(() => {\n        loadNotes()\n    }, [loadNotes])\n\n    useEffect(() => {\n        loadCategories()\n    }, [loadCategories])\n\n    return (\n        <AppContainer>\n            <KeyboardProvider>\n                <AppSidebar />\n                <NoteList />\n                <NoteEditor />\n                <KeyboardShortcuts />\n            </KeyboardProvider>\n        </AppContainer>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    loadNotes: () => dispatch(loadNotes()),\n    loadCategories: () => dispatch(loadCategories()),\n})\n\nexport default connect(null, mapDispatchToProps)(App)\n\nconst AppContainer = styled.div`\n    display: grid;\n    grid-template-areas: 'app-sidebar note-sidebar editor editor';\n    grid-template-columns: 175px 300px auto;\n    min-height: 100vh;\n`\n","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteOptions.tsx",[],"E:\\Web\\Pet\\ama_notes\\src\\constants\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\contexts\\KeyboardContext.tsx",[],"E:\\Web\\Pet\\ama_notes\\src\\containers\\KeyboardShortcuts.tsx",[],"E:\\Web\\Pet\\ama_notes\\src\\helpers\\hooks.ts",[],{"ruleId":"180","severity":1,"message":"181","line":2,"column":19,"nodeType":"182","messageId":"183","endLine":2,"endColumn":29},{"ruleId":"184","replacedBy":"185"},{"ruleId":"186","replacedBy":"187"},{"ruleId":"180","severity":1,"message":"188","line":9,"column":8,"nodeType":"182","messageId":"183","endLine":9,"endColumn":14},{"ruleId":"189","severity":1,"message":"190","line":29,"column":13,"nodeType":"191","messageId":"192","endLine":29,"endColumn":25},{"ruleId":"180","severity":1,"message":"193","line":45,"column":15,"nodeType":"182","messageId":"183","endLine":45,"endColumn":30},{"ruleId":"194","severity":1,"message":"195","line":54,"column":8,"nodeType":"196","endLine":54,"endColumn":10,"suggestions":"197"},{"ruleId":"180","severity":1,"message":"198","line":4,"column":10,"nodeType":"182","messageId":"183","endLine":4,"endColumn":19},{"ruleId":"180","severity":1,"message":"199","line":5,"column":16,"nodeType":"182","messageId":"183","endLine":5,"endColumn":20},{"ruleId":"180","severity":1,"message":"200","line":159,"column":7,"nodeType":"182","messageId":"183","endLine":159,"endColumn":12},{"ruleId":"180","severity":1,"message":"201","line":164,"column":7,"nodeType":"182","messageId":"183","endLine":164,"endColumn":15},{"ruleId":"180","severity":1,"message":"202","line":182,"column":7,"nodeType":"182","messageId":"183","endLine":182,"endColumn":23},{"ruleId":"180","severity":1,"message":"203","line":189,"column":7,"nodeType":"182","messageId":"183","endLine":189,"endColumn":24},{"ruleId":"180","severity":1,"message":"188","line":5,"column":8,"nodeType":"182","messageId":"183","endLine":5,"endColumn":14},{"ruleId":"184","replacedBy":"204"},{"ruleId":"186","replacedBy":"205"},{"ruleId":"184","replacedBy":"206"},{"ruleId":"186","replacedBy":"207"},{"ruleId":"180","severity":1,"message":"208","line":1,"column":20,"nodeType":"182","messageId":"183","endLine":1,"endColumn":24},{"ruleId":"180","severity":1,"message":"209","line":207,"column":7,"nodeType":"182","messageId":"183","endLine":207,"endColumn":26},{"ruleId":"180","severity":1,"message":"200","line":259,"column":7,"nodeType":"182","messageId":"183","endLine":259,"endColumn":12},{"ruleId":"180","severity":1,"message":"201","line":264,"column":7,"nodeType":"182","messageId":"183","endLine":264,"endColumn":15},{"ruleId":"180","severity":1,"message":"202","line":282,"column":7,"nodeType":"182","messageId":"183","endLine":282,"endColumn":23},{"ruleId":"180","severity":1,"message":"210","line":287,"column":7,"nodeType":"182","messageId":"183","endLine":287,"endColumn":16},{"ruleId":"180","severity":1,"message":"211","line":174,"column":7,"nodeType":"182","messageId":"183","endLine":174,"endColumn":16},{"ruleId":"180","severity":1,"message":"188","line":9,"column":8,"nodeType":"182","messageId":"183","endLine":9,"endColumn":14},{"ruleId":"180","severity":1,"message":"198","line":4,"column":10,"nodeType":"182","messageId":"183","endLine":4,"endColumn":19},{"ruleId":"180","severity":1,"message":"199","line":6,"column":16,"nodeType":"182","messageId":"183","endLine":6,"endColumn":20},{"ruleId":"189","severity":1,"message":"190","line":29,"column":13,"nodeType":"191","messageId":"192","endLine":29,"endColumn":25},{"ruleId":"180","severity":1,"message":"188","line":5,"column":8,"nodeType":"182","messageId":"183","endLine":5,"endColumn":14},"@typescript-eslint/no-unused-vars","'deleteNote' is defined but never used.","Identifier","unusedVar","no-native-reassign",["212"],"no-negated-in-lhs",["213"],"'Colors' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'filteredResults' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleNoteOptionsClick'. Either include it or remove the dependency array.","ArrayExpression",["214"],"'loadNotes' is defined but never used.","'uuid' is defined but never used.","'Title' is assigned a value but never used.","'AllNotes' is assigned a value but never used.","'AppSidebarButton' is assigned a value but never used.","'AddCategoryButton' is assigned a value but never used.",["212"],["213"],["212"],["213"],"'take' is defined but never used.","'AppSidebarActionsH1' is assigned a value but never used.","'AddButton' is assigned a value but never used.","'Searchbar' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"215","fix":"216"},"Update the dependencies array to be: [handleNoteOptionsClick]",{"range":"217","text":"218"},[2024,2026],"[handleNoteOptionsClick]"]