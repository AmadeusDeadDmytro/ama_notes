[{"D:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts":"1","D:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts":"2","D:\\Web\\Pet\\ama_notes\\src\\containers\\Navigation.tsx":"3","D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx":"4","D:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts":"5","D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx":"6","D:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts":"7","D:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx":"8","D:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts":"9","D:\\Web\\Pet\\ama_notes\\src\\componets\\App.tsx":"10","D:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts":"11","D:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts":"12"},{"size":2541,"mtime":1609435598521,"results":"13","hashOfConfig":"14"},{"size":2020,"mtime":1609435740782,"results":"15","hashOfConfig":"14"},{"size":3174,"mtime":1609450472242,"results":"16","hashOfConfig":"14"},{"size":2747,"mtime":1609436102103,"results":"17","hashOfConfig":"14"},{"size":785,"mtime":1609361361308,"results":"18","hashOfConfig":"14"},{"size":4835,"mtime":1609456383996,"results":"19","hashOfConfig":"14"},{"size":2836,"mtime":1609436325086,"results":"20","hashOfConfig":"14"},{"size":5588,"mtime":1609448440078,"results":"21","hashOfConfig":"14"},{"size":400,"mtime":1609450118057,"results":"22","hashOfConfig":"14"},{"size":1338,"mtime":1609448480841,"results":"23","hashOfConfig":"14"},{"size":737,"mtime":1609358913328,"results":"24","hashOfConfig":"14"},{"size":789,"mtime":1609362014158,"results":"25","hashOfConfig":"14"},{"filePath":"26","messages":"27","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j5cugq",{"filePath":"28","messages":"29","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"32","messages":"33","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"34","messages":"35","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"39","messages":"40","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"41","messages":"42","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"43","usedDeprecatedRules":"44"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"47","messages":"48","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"49","messages":"50","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"51","messages":"52","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\containers\\Navigation.tsx",[],"D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx",["53"],"D:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts",["54"],"import { SyncState, SyncStateActionTypes } from 'types'\n\nimport { Actions } from 'constants/enums'\n\nconst initialState = {\n    syncing: false,\n    error: '',\n}\n\nconst syncReducer = (state = initialState, action: SyncStateActionTypes): SyncState => {\n    switch (action.type) {\n        default:\n        case Actions.SYNC_STATE:\n            return {\n                ...state,\n                syncing: true,\n            }\n        case Actions.SYNC_STATE_SUCCESS:\n            return {\n                ...state,\n                syncing: false,\n            }\n        case Actions.SYNC_STATE_ERROR:\n            return {\n                ...state,\n                syncing: false,\n                error: action.payload,\n            }\n            return state\n    }\n}\n\nexport default syncReducer\n","D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx",["55"],"D:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts",["56","57"],"D:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx",["58","59"],"import { ApplicationState, CategoryItem } from 'types'\nimport React, { useState } from 'react'\nimport { addCategory, swapCategory } from 'actions'\n\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport { connect } from 'react-redux'\nimport kebabCase from 'lodash/kebabCase'\nimport styled from 'styled-components'\n\ninterface AppProps {\n    addCategory: (category: CategoryItem) => void\n    swapCategory: (categoryId: string) => void\n    categories: CategoryItem[]\n    activeCategoryId: string\n}\n\nconst AppSidebar: React.FC<AppProps> = ({ addCategory, swapCategory, categories, activeCategoryId }) => {\n    const [addingTempCategory, setAddingTempCategory] = useState(false)\n    const [tempCategory, setTempCategory] = useState('')\n\n    const newTempCategoryHandler = () => {\n        !addingTempCategory && setAddingTempCategory(true)\n    }\n\n    const onSubmit = event => {\n        event.preventDefault()\n\n        const category = { id: kebabCase(tempCategory), name: tempCategory }\n\n        addCategory(category)\n\n        setTempCategory('')\n        setAddingTempCategory(false)\n    }\n\n    return (\n        <AppSidebarContainer>\n            <AppSidebarMain>\n                <AppSidebarLink onClick={() => {\n                    swapCategory('')\n                }}>\n                    Все записи\n                </AppSidebarLink>\n                \n                <AllCategories>Категории</AllCategories>\n\n                <CategoryListContainer>\n                    {categories.map((category) => {\n                        return (\n                            <CategoryEach\n                                key={category.id}\n                                active={category.id === activeCategoryId}\n                                onClick={() => {\n                                    if (category.id !== activeCategoryId) {\n                                        swapCategory(category.id)\n                                    }\n                                }}\n                            >\n                                {category.name}\n                            </CategoryEach>\n                        )\n                    })}\n                </CategoryListContainer>\n\n                {addingTempCategory && (\n                    <AddCategoryForm onSubmit={onSubmit}>\n                        <CategoryNameInput\n                            placeholder=\"Имя категории...\"\n                            autoFocus\n                            onChange={(event) => {\n                                setTempCategory(event.target.value)\n                            }}\n                            onBlur={event => {\n                                if (!tempCategory) {\n                                    setAddingTempCategory(false)\n                                } else {\n                                    onSubmit(event)\n                                }\n                            }}\n                        />\n                    </AddCategoryForm>\n                )}\n\n                <AppSidebarButton>\n                    <AddCategoryButton onClick={newTempCategoryHandler}>Добавить категорию</AddCategoryButton>\n                </AppSidebarButton>\n            </AppSidebarMain>\n        </AppSidebarContainer>\n    )\n}\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    activeCategoryId: state.categoryState.activeCategoryId,\n    categories: state.categoryState.categories,\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    swapCategory: (categoryId: string) => dispatch(swapCategory(categoryId)),\n    addCategory: (category: CategoryItem) => dispatch(addCategory(category)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(AppSidebar)\n\nconst AppSidebarContainer = styled.aside`\n    padding: 1rem 0;\n    grid-area: app-sidebar;\n    background: ${Colors.BACKGROUND_DARK_ONE};\n    color: rgba(255, 255, 255, 0.8);\n    display: flex;\n    flex-direction: column;\n`\n\nconst AppSidebarLink = styled.div`\n    padding: 0 0.5rem;\n    cursor: pointer;\n    font-size: 0.9rem;\n    font-weight: 600;\n\n    &:hover {\n        background: ${Colors.A_COLOR_THREE};\n    }\n`\n\nconst AppSidebarMain = styled.section`\n    flex: 1;\n`\n\nconst Title = styled.h1`\n    font-size: 1.3rem;\n    padding: 0.5rem;\n    margin: 0;\n`\nconst AllNotes = styled.p`\n    padding: 0 0.5rem;\n`\nconst AllCategories = styled.h2`\n    margin: 1rem 0 0;\n    color: ${Colors.A_COLOR_ONE};\n    text-transform: uppercase;\n    font-size: 0.7rem;\n    padding: 0.5rem;\n`\n\nconst AppSidebarButton = styled.section`\n    width: 100%;\n    align-self: flex-end;\n`\n\nconst AddCategoryButton = styled.button`\n    display: block;\n    cursor: pointer;\n    background: transparent;\n    font-weight: 600;\n    border: none;\n    font-size: 1rem;\n    color: white;\n    width: 100%;\n    text-align: center;\n    padding: 1rem;\n\n    &:hover {\n        background: rgba(0, 0, 0, 0.2);\n    }\n`\n\nconst CategoryListContainer = styled.div`\n    font-size: 0.9rem;\n`\nconst CategoryEach = styled.div<{ active: boolean }>`\n    cursor: pointer;\n    padding: 0.5rem;\n    color: rgba(255, 255, 255, 0.8);\n    background: ${({ active }) => active && Colors.ACTIVE};\n\n    &:last-of-type {\n        border-bottom: none;\n    }\n\n    &:hover {\n        background: ${Colors.BACKGROUND_DARK_THREE};\n    }\n`\n\nconst AddCategoryForm = styled.form``\n\nconst CategoryNameInput = styled.input`\n    background: rgba(0, 0, 0, 0.5);\n    border: 1px solid ${Colors.A_COLOR_ONE};\n    padding: 0.5rem;\n    font-size: 0.9rem;\n    -webkit-appearance: none;\n    color: ${Colors.A_COLOR_TWO};\n`\n",["60","61"],"D:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\componets\\App.tsx",["62"],"D:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts",[],{"ruleId":"63","severity":1,"message":"64","line":9,"column":8,"nodeType":"65","messageId":"66","endLine":9,"endColumn":14},{"ruleId":"67","severity":1,"message":"68","line":29,"column":13,"nodeType":"69","messageId":"70","endLine":29,"endColumn":25},{"ruleId":"71","severity":1,"message":"72","line":45,"column":8,"nodeType":"73","endLine":45,"endColumn":10,"suggestions":"74"},{"ruleId":"63","severity":1,"message":"75","line":4,"column":10,"nodeType":"65","messageId":"66","endLine":4,"endColumn":19},{"ruleId":"63","severity":1,"message":"76","line":5,"column":16,"nodeType":"65","messageId":"66","endLine":5,"endColumn":20},{"ruleId":"63","severity":1,"message":"77","line":129,"column":7,"nodeType":"65","messageId":"66","endLine":129,"endColumn":12},{"ruleId":"63","severity":1,"message":"78","line":134,"column":7,"nodeType":"65","messageId":"66","endLine":134,"endColumn":15},{"ruleId":"79","replacedBy":"80"},{"ruleId":"81","replacedBy":"82"},{"ruleId":"63","severity":1,"message":"64","line":5,"column":8,"nodeType":"65","messageId":"66","endLine":5,"endColumn":14},"@typescript-eslint/no-unused-vars","'Colors' is defined but never used.","Identifier","unusedVar","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleNoteOptionsClick'. Either include it or remove the dependency array.","ArrayExpression",["83"],"'loadNotes' is defined but never used.","'uuid' is defined but never used.","'Title' is assigned a value but never used.","'AllNotes' is assigned a value but never used.","no-native-reassign",["84"],"no-negated-in-lhs",["85"],{"desc":"86","fix":"87"},"no-global-assign","no-unsafe-negation","Update the dependencies array to be: [handleNoteOptionsClick]",{"range":"88","text":"89"},[1392,1394],"[handleNoteOptionsClick]"]