[{"D:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts":"1","D:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts":"2","D:\\Web\\Pet\\ama_notes\\src\\containers\\Navigation.tsx":"3","D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx":"4","D:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts":"5","D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx":"6","D:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts":"7","D:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx":"8","D:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts":"9","D:\\Web\\Pet\\ama_notes\\src\\componets\\App.tsx":"10","D:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts":"11","D:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts":"12","D:\\Web\\Pet\\ama_notes\\src\\index.tsx":"13","E:\\Web\\Pet\\ama_notes\\src\\index.tsx":"14","E:\\Web\\Pet\\ama_notes\\src\\reducers\\index.ts":"15","E:\\Web\\Pet\\ama_notes\\src\\sagas\\index.ts":"16","E:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx":"17","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx":"18","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx":"19","E:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts":"20","E:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts":"21","E:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts":"22","E:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts":"23","E:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts":"24","E:\\Web\\Pet\\ama_notes\\src\\api\\index.ts":"25","E:\\Web\\Pet\\ama_notes\\src\\constants\\codeMirrorOptions.ts":"26","E:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts":"27","E:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts":"28","E:\\Web\\Pet\\ama_notes\\src\\containers\\App.tsx":"29","E:\\Web\\Pet\\ama_notes\\src\\containers\\KeyboardShortcuts.tsx":"30","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteOptions.tsx":"31"},{"size":3180,"mtime":1609785928423,"results":"32","hashOfConfig":"33"},{"size":1497,"mtime":1609694531928,"results":"34","hashOfConfig":"33"},{"size":3230,"mtime":1609787249723,"results":"35","hashOfConfig":"33"},{"size":2737,"mtime":1609856010314,"results":"36","hashOfConfig":"33"},{"size":818,"mtime":1609622652667,"results":"37","hashOfConfig":"33"},{"size":8252,"mtime":1609856062059,"results":"38","hashOfConfig":"33"},{"size":5651,"mtime":1609787691005,"results":"39","hashOfConfig":"33"},{"size":8235,"mtime":1609787205725,"results":"40","hashOfConfig":"33"},{"size":473,"mtime":1609783732431,"results":"41","hashOfConfig":"33"},{"size":1338,"mtime":1609856297958,"results":"42","hashOfConfig":"33"},{"size":1048,"mtime":1609786308827,"results":"43","hashOfConfig":"33"},{"size":1238,"mtime":1609856246554,"results":"44","hashOfConfig":"33"},{"size":767,"mtime":1609362001538,"results":"45","hashOfConfig":"33"},{"size":768,"mtime":1610025048364,"results":"46","hashOfConfig":"47"},{"size":502,"mtime":1609361809731,"results":"48","hashOfConfig":"47"},{"size":1223,"mtime":1609362448208,"results":"49","hashOfConfig":"47"},{"size":10606,"mtime":1610032313557,"results":"50","hashOfConfig":"47"},{"size":8557,"mtime":1610032061964,"results":"51","hashOfConfig":"47"},{"size":2737,"mtime":1609856010314,"results":"52","hashOfConfig":"47"},{"size":1498,"mtime":1609785928906,"results":"53","hashOfConfig":"47"},{"size":5651,"mtime":1609787691005,"results":"54","hashOfConfig":"47"},{"size":818,"mtime":1609622652667,"results":"55","hashOfConfig":"47"},{"size":1048,"mtime":1609786308827,"results":"56","hashOfConfig":"47"},{"size":3180,"mtime":1609785928423,"results":"57","hashOfConfig":"47"},{"size":1249,"mtime":1609362447771,"results":"58","hashOfConfig":"47"},{"size":189,"mtime":1610023833855,"results":"59","hashOfConfig":"47"},{"size":473,"mtime":1609783732431,"results":"60","hashOfConfig":"47"},{"size":1238,"mtime":1609856246554,"results":"61","hashOfConfig":"47"},{"size":1306,"mtime":1610025385857,"results":"62","hashOfConfig":"47"},{"size":483,"mtime":1610026471640,"results":"63","hashOfConfig":"47"},{"size":2640,"mtime":1610032147636,"results":"64","hashOfConfig":"47"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j5cugq",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},"19u8yaq",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"97"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"97"},{"filePath":"109","messages":"110","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"111","messages":"112","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"113","usedDeprecatedRules":"97"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"97"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"97"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"97"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\containers\\Navigation.tsx",["137"],"import { ApplicationState, CategoryItem, NoteItem } from 'types'\nimport { addNote, deleteNote, sendNoteToTrash, swapNote, syncState } from 'actions'\nimport { downloadNote, getNoteTitle } from 'helpers'\n\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport styled from 'styled-components'\nimport { v4 as uuid } from 'uuid'\n\ninterface NavigationProps {\n    addNote: (note: NoteItem) => void\n    swapNote: (noteId: string) => void\n    sendNoteToTrash: (noteId: string) => void\n    syncState: (notes: NoteItem[], categories: CategoryItem[]) => void\n    activeNote?: NoteItem\n    notes: NoteItem[]\n    categories: CategoryItem[]\n    syncing: boolean\n}\n\nconst Navigation: React.FC<NavigationProps> = ({ addNote, activeNote, sendNoteToTrash, swapNote, syncState, notes, syncing, categories }) => {\n    const newNoteHandler = () => {\n        const note: NoteItem = {\n            id: uuid(),\n            text: '',\n            created: moment().format(),\n            lastUpdated: moment().format(),\n        }\n\n        if ((activeNote && activeNote.text !== '') || !activeNote) {\n            addNote(note)\n            swapNote(note.id)\n        }\n    }\n\n    const trashNoteHandler = () => {\n        if (activeNote && !activeNote.trash) {\n            sendNoteToTrash(activeNote.id)\n        }\n    }\n\n    const syncNoteHandler = () => {\n        syncState(notes, categories)\n    }\n\n    const downloadHandler = () => {\n        if (activeNote) {\n            downloadNote(getNoteTitle(activeNote.text), activeNote)\n        }\n    }\n\n    return (\n        <NavigationContainer>\n            <NavButton onClick={newNoteHandler}>+ Новая запись</NavButton>\n            <NavButton onClick={trashNoteHandler}>x Удалить запись</NavButton>\n            <NavButton onClick={downloadHandler}>^ Скачать запись</NavButton>\n            <NavButton onClick={syncNoteHandler}>\n                Синхронизировать записи\n                {syncing && 'Синхронизация...'}\n            </NavButton>\n        </NavigationContainer>\n    )\n}\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    syncing: state.syncState.syncing,\n    notes: state.noteState.notes,\n    categories: state.categoryState.categories,\n    activeNote: state.noteState.notes.find((note) => note.id === state.noteState.activeNoteId),\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    addNote: (note: NoteItem) => dispatch(addNote(note)),\n    swapNote: (noteId: string) => dispatch(swapNote(noteId)),\n    sendNoteToTrash: (noteId: string) => dispatch(sendNoteToTrash(noteId)),\n    syncState: (notes: NoteItem[], categories: CategoryItem[]) => dispatch(syncState(notes, categories)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation)\n\nconst NavButton = styled.button`\n    display: block;\n    cursor: pointer;\n    background: transparent;\n    font-weight: 600;\n    border: none;\n    font-size: 1rem;\n\n    &:hover {\n        background: ${Colors.HOVER};\n    }\n`\n\nconst NavigationContainer = styled.div`\n    grid-area: nav;\n    background: ${Colors.BACKGROUND};\n    display: flex;\n`\n",["138","139"],"D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx",["140"],"import 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/base16-light.css'\nimport 'codemirror/mode/gfm/gfm.js'\nimport 'codemirror/addon/selection/active-line.js'\n\nimport { ApplicationState, NoteItem } from 'types'\n\nimport { Controlled as CodeMirror } from 'react-codemirror2'\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport options from 'constants/codeMirrorOptions'\nimport styled from 'styled-components'\nimport { updateNote } from 'actions'\n\ninterface NoteEditorProps {\n    loading: boolean\n    activeNote?: NoteItem\n    updateNote: (note: NoteItem) => void\n}\n\nconst NoteEditor: React.FC<NoteEditorProps> = ({ loading, activeNote, updateNote }) => {\n    if (loading) {\n        return <EmptyEditor>Загрузка...</EmptyEditor>\n    } else if (!activeNote) {\n        return <EmptyEditorCenter />\n    } else {\n        return (\n            <Editor\n                className=\"mousetrap\"\n                value={activeNote.text}\n                options={options}\n                editorDidMount={(editor) => {\n                    editor.focus()\n                }}\n                onBeforeChange={(editor, data, value) => {\n                    updateNote({\n                        id: activeNote.id,\n                        text: value,\n                        created: activeNote.created,\n                        lastUpdated: moment().format(),\n                    })\n                }}\n                onChange={(editor, data, value) => {\n                    editor.focus()\n                }}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    loading: state.noteState.loading,\n    activeNote: state.noteState.notes.find((note) => note.id === state.noteState.activeNoteId),\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    updateNote: (note: NoteItem) => dispatch(updateNote(note)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteEditor)\n\nconst EmptyEditor = styled.div`\n    grid-area: editor;\n    max-height: calc(100vh - 25px);\n    overflow-y: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst EmptyEditorCenter = styled(EmptyEditor)`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst Editor = styled(CodeMirror)`\n    grid-area: editor;\n\n    .CodeMirror {\n        -webkit-font-smoothing: subpixel-antialiased;\n        height: 100%;\n        font-family: Menlo, Monaco, monospace;\n        font-weight: 500;\n        font-size: 15px;\n        line-height: 1.5;\n    }\n\n    .CodeMirror-activeline-background {\n        background: rgba(0, 0, 0, 0.05) !important;\n    }\n`\n","D:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts",["141"],"D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx",["142","143"],"D:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts",["144","145"],"D:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx",["146","147","148","149"],"D:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\componets\\App.tsx",["150"],"D:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\index.tsx",[],["151","152"],"E:\\Web\\Pet\\ama_notes\\src\\index.tsx",[],["153","154"],"E:\\Web\\Pet\\ama_notes\\src\\reducers\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\sagas\\index.ts",["155"],"import { all, put, take, takeLatest } from 'redux-saga/effects'\nimport { loadCategoriesError, loadCategoriesSuccess, loadNotesError, loadNotesSuccess, syncStateError, syncStateSuccess } from 'actions'\nimport { requestCategories, requestNotes, saveState } from 'api'\n\nimport { Actions } from 'constants/enums'\nimport { SyncStateAction } from 'types/index'\n\nfunction* fetchNotes() {\n    try {\n        const notes = yield requestNotes()\n        yield put(loadNotesSuccess(notes))\n    } catch (error) {\n        yield put(loadNotesError(error))\n    }\n}\n\nfunction* fetchCategories() {\n    try {\n        const categories = yield requestCategories()\n        yield put(loadCategoriesSuccess(categories))\n    } catch (error) {\n        yield put(loadCategoriesError(error))\n    }\n}\n\nfunction* postState({ payload: { notes, categories } }: SyncStateAction) {\n    try {\n        yield saveState(notes, categories)\n\n        yield put(syncStateSuccess())\n    } catch (error) {\n        yield put(syncStateError(error))\n    }\n}\n\nexport function* allSaga() {\n    yield all([takeLatest(Actions.LOAD_NOTES, fetchNotes), takeLatest(Actions.LOAD_CATEGORIES, fetchCategories), takeLatest(Actions.SYNC_STATE, postState)])\n}\n\nexport default allSaga\n","E:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx",["156","157","158","159"],"E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx",["160","161"],"E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx",["162"],"E:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts",["163","164"],"import { Actions, Folders } from 'constants/enums'\nimport { NoteItem, NoteState, NotesActionTypes } from 'types'\n\nimport { loadNotes } from './../actions/index'\nimport { v4 as uuid } from 'uuid'\n\nconst initialState: NoteState = {\n    notes: [],\n    activeNoteId: '',\n    activeFolder: 'ALL',\n    activeCategoryId: '',\n    error: '',\n    loading: true,\n}\n\nconst noteReducer = (state = initialState, action: NotesActionTypes): NoteState => {\n    switch (action.type) {\n        case Actions.LOAD_NOTES:\n            return initialState\n        case Actions.LOAD_NOTES_SUCCESS:\n            return {\n                ...state,\n                notes: action.payload,\n                activeNoteId: action.payload.length > 0 ? action.payload[0].id : '',\n                loading: false,\n            }\n        case Actions.LOAD_NOTES_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload,\n            }\n        case Actions.SWAP_NOTE:\n            return {\n                ...state,\n                activeNoteId: action.payload,\n            }\n        case Actions.SWAP_CATEGORY:\n            return {\n                ...state,\n                activeCategoryId: action.payload,\n                activeFolder: Folders.CATEGORY,\n                activeNoteId: getFirstNote(Folders.CATEGORY, state.notes, action.payload),\n            }\n        case Actions.SWAP_FOLDER:\n            return {\n                ...state,\n                activeFolder: action.payload,\n                activeCategoryId: '',\n                activeNoteId: getFirstNote(action.payload, state.notes),\n            }\n        case Actions.PRUNE_NOTES:\n            return {\n                ...state,\n                notes: state.notes.filter((note) => note.text !== '' || note.id === state.activeNoteId),\n            }\n        case Actions.ADD_NOTE:\n            return {\n                ...state,\n                notes: [...state.notes, action.payload],\n            }\n        case Actions.UPDATE_NOTE:\n            return {\n                ...state,\n                notes: state.notes.map((note) => {\n                    if (note.id === action.payload.id) {\n                        return {\n                            ...note,\n                            text: action.payload.text,\n                            lastUpdated: action.payload.lastUpdated,\n                        }\n                    } else {\n                        return note\n                    }\n                }),\n            }\n        case Actions.SEND_NOTE_TO_TRASH:\n            return {\n                ...state,\n                notes: state.notes.map((note) => {\n                    if (note.id === action.payload) {\n                        return {\n                            ...note,\n                            trash: true,\n                        }\n                    } else {\n                        return note\n                    }\n                }),\n                activeNoteId: getNewNoteId(state.notes, action.payload, state.activeCategoryId),\n            }\n        case Actions.DELETE_NOTE:\n            return {\n                ...state,\n                notes: state.notes.filter((note) => note.id !== action.payload),\n                activeNoteId: getNewNoteId(state.notes, action.payload, state.activeCategoryId),\n            }\n        case Actions.PRUNE_CATEGORY_FROM_NOTES:\n            return {\n                ...state,\n                notes: state.notes.map((note) => {\n                    if (note.category === action.payload) {\n                        return {\n                            ...note,\n                            category: undefined,\n                        }\n                    } else {\n                        return note\n                    }\n                }),\n            }\n        case Actions.ADD_CATEGORY_TO_NOTE:\n            return {\n                ...state,\n                notes: state.notes.map((note) => {\n                    if (note.id === action.payload.noteId) {\n                        return {\n                            ...note,\n                            category: action.payload.categoryId,\n                        }\n                    } else {\n                        return note\n                    }\n                }),\n            }\n        default:\n            return state\n    }\n}\n\nexport default noteReducer\n\nexport function getFirstNote(folder: string, notes: NoteItem[], categoryId?: string): string {\n    const notesNotTrash = notes.filter((note) => !note.trash)\n\n    switch (folder) {\n        case Folders.CATEGORY:\n            return notesNotTrash.find((note) => note.category === categoryId) ? notesNotTrash.find((note) => note.category === categoryId)!.id : ''\n        case Folders.ALL:\n            return notesNotTrash.length > 0 ? notesNotTrash[0].id : ''\n        case Folders.TRASH:\n            return notes.find((note) => note.trash) ? notes.find((note) => note.trash)!.id : ''\n        default:\n            return ''\n    }\n}\n\nexport function getNewNoteId(notes: NoteItem[], oldNoteId: string, activeCategoryId: string): string {\n    const notesNotTrash = activeCategoryId ? notes.filter((note) => !note.trash && note.category === activeCategoryId) : notes.filter((note) => !note.trash)\n    const deletedNoteIndex = notesNotTrash.findIndex((note) => note.id === oldNoteId)\n    let newActiveNoteId = ''\n\n    if (deletedNoteIndex === 0 && notesNotTrash[1]) {\n        newActiveNoteId = notesNotTrash[deletedNoteIndex + 1].id\n    } else if (notesNotTrash[deletedNoteIndex - 1]) {\n        newActiveNoteId = notesNotTrash[deletedNoteIndex - 1].id\n    }\n\n    return newActiveNoteId\n}\n","E:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts",["165"],"import { SyncState, SyncStateActionTypes } from 'types'\r\n\r\nimport { Actions } from 'constants/enums'\r\n\r\nconst initialState = {\r\n    syncing: false,\r\n    error: '',\r\n}\r\n\r\nconst syncReducer = (state = initialState, action: SyncStateActionTypes): SyncState => {\r\n    switch (action.type) {\r\n        default:\r\n        case Actions.SYNC_STATE:\r\n            return {\r\n                ...state,\r\n                syncing: true,\r\n            }\r\n        case Actions.SYNC_STATE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                syncing: false,\r\n            }\r\n        case Actions.SYNC_STATE_ERROR:\r\n            return {\r\n                ...state,\r\n                syncing: false,\r\n                error: action.payload,\r\n            }\r\n            return state\r\n    }\r\n}\r\n\r\nexport default syncReducer\r\n","E:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\api\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\constants\\codeMirrorOptions.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\containers\\App.tsx",["166"],"import React, { useEffect } from 'react'\nimport { loadCategories, loadNotes } from 'actions'\n\nimport AppSidebar from 'containers/AppSidebar'\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport KeyboardShortcuts from 'containers/KeyboardShortcuts'\nimport NoteEditor from 'containers/NoteEditor'\nimport NoteList from 'containers/NoteList'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\ninterface AppProps {\n    loadNotes: () => void\n    loadCategories: () => void\n}\n\nconst App: React.FC<AppProps> = ({ loadNotes, loadCategories }) => {\n    useEffect(() => {\n        loadNotes()\n    }, [loadNotes])\n\n    useEffect(() => {\n        loadCategories()\n    }, [loadCategories])\n\n    return (\n        <AppContainer>\n            <AppSidebar />\n            <NoteList />\n            <NoteEditor />\n            <KeyboardShortcuts />\n        </AppContainer>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    loadNotes: () => dispatch(loadNotes()),\n    loadCategories: () => dispatch(loadCategories()),\n})\n\nexport default connect(null, mapDispatchToProps)(App)\n\nconst AppContainer = styled.div`\n    display: grid;\n    grid-template-areas: 'app-sidebar note-sidebar editor editor';\n    grid-template-columns: 175px 300px auto;\n    min-height: 100vh;\n`\n","E:\\Web\\Pet\\ama_notes\\src\\containers\\KeyboardShortcuts.tsx",["167","168"],"import { ApplicationState, CategoryItem, NoteItem } from 'types'\n\nimport { Dispatch } from 'redux'\nimport React from 'react'\nimport { connect } from 'react-redux'\n\ninterface KeyboardShortcutsProps {}\n\nconst KeyboardShortcuts: React.FC<KeyboardShortcutsProps> = () => {\n    return null\n}\n\nconst mapStateToProps = (state: ApplicationState) => ({})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(KeyboardShortcuts)\n","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteOptions.tsx",["169","170","171","172"],{"ruleId":"173","severity":1,"message":"174","line":2,"column":19,"nodeType":"175","messageId":"176","endLine":2,"endColumn":29},{"ruleId":"177","replacedBy":"178"},{"ruleId":"179","replacedBy":"180"},{"ruleId":"173","severity":1,"message":"181","line":9,"column":8,"nodeType":"175","messageId":"176","endLine":9,"endColumn":14},{"ruleId":"182","severity":1,"message":"183","line":29,"column":13,"nodeType":"184","messageId":"185","endLine":29,"endColumn":25},{"ruleId":"173","severity":1,"message":"186","line":45,"column":15,"nodeType":"175","messageId":"176","endLine":45,"endColumn":30},{"ruleId":"187","severity":1,"message":"188","line":54,"column":8,"nodeType":"189","endLine":54,"endColumn":10,"suggestions":"190"},{"ruleId":"173","severity":1,"message":"191","line":4,"column":10,"nodeType":"175","messageId":"176","endLine":4,"endColumn":19},{"ruleId":"173","severity":1,"message":"192","line":5,"column":16,"nodeType":"175","messageId":"176","endLine":5,"endColumn":20},{"ruleId":"173","severity":1,"message":"193","line":159,"column":7,"nodeType":"175","messageId":"176","endLine":159,"endColumn":12},{"ruleId":"173","severity":1,"message":"194","line":164,"column":7,"nodeType":"175","messageId":"176","endLine":164,"endColumn":15},{"ruleId":"173","severity":1,"message":"195","line":182,"column":7,"nodeType":"175","messageId":"176","endLine":182,"endColumn":23},{"ruleId":"173","severity":1,"message":"196","line":189,"column":7,"nodeType":"175","messageId":"176","endLine":189,"endColumn":24},{"ruleId":"173","severity":1,"message":"181","line":5,"column":8,"nodeType":"175","messageId":"176","endLine":5,"endColumn":14},{"ruleId":"177","replacedBy":"197"},{"ruleId":"179","replacedBy":"198"},{"ruleId":"177","replacedBy":"199"},{"ruleId":"179","replacedBy":"200"},{"ruleId":"173","severity":1,"message":"201","line":1,"column":20,"nodeType":"175","messageId":"176","endLine":1,"endColumn":24},{"ruleId":"173","severity":1,"message":"193","line":206,"column":7,"nodeType":"175","messageId":"176","endLine":206,"endColumn":12},{"ruleId":"173","severity":1,"message":"194","line":211,"column":7,"nodeType":"175","messageId":"176","endLine":211,"endColumn":15},{"ruleId":"173","severity":1,"message":"195","line":229,"column":7,"nodeType":"175","messageId":"176","endLine":229,"endColumn":23},{"ruleId":"173","severity":1,"message":"196","line":245,"column":7,"nodeType":"175","messageId":"176","endLine":245,"endColumn":24},{"ruleId":"173","severity":1,"message":"186","line":57,"column":15,"nodeType":"175","messageId":"176","endLine":57,"endColumn":30},{"ruleId":"187","severity":1,"message":"188","line":66,"column":8,"nodeType":"189","endLine":66,"endColumn":10,"suggestions":"202"},{"ruleId":"173","severity":1,"message":"181","line":9,"column":8,"nodeType":"175","messageId":"176","endLine":9,"endColumn":14},{"ruleId":"173","severity":1,"message":"191","line":4,"column":10,"nodeType":"175","messageId":"176","endLine":4,"endColumn":19},{"ruleId":"173","severity":1,"message":"192","line":5,"column":16,"nodeType":"175","messageId":"176","endLine":5,"endColumn":20},{"ruleId":"182","severity":1,"message":"183","line":29,"column":13,"nodeType":"184","messageId":"185","endLine":29,"endColumn":25},{"ruleId":"173","severity":1,"message":"181","line":5,"column":8,"nodeType":"175","messageId":"176","endLine":5,"endColumn":14},{"ruleId":"173","severity":1,"message":"203","line":1,"column":28,"nodeType":"175","messageId":"176","endLine":1,"endColumn":40},{"ruleId":"173","severity":1,"message":"204","line":1,"column":42,"nodeType":"175","messageId":"176","endLine":1,"endColumn":50},{"ruleId":"173","severity":1,"message":"205","line":3,"column":10,"nodeType":"175","messageId":"176","endLine":3,"endColumn":17},{"ruleId":"173","severity":1,"message":"206","line":3,"column":46,"nodeType":"175","messageId":"176","endLine":3,"endColumn":55},{"ruleId":"173","severity":1,"message":"207","line":9,"column":8,"nodeType":"175","messageId":"176","endLine":9,"endColumn":14},{"ruleId":"173","severity":1,"message":"192","line":11,"column":16,"nodeType":"175","messageId":"176","endLine":11,"endColumn":20},"@typescript-eslint/no-unused-vars","'deleteNote' is defined but never used.","Identifier","unusedVar","no-native-reassign",["208"],"no-negated-in-lhs",["209"],"'Colors' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'filteredResults' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleNoteOptionsClick'. Either include it or remove the dependency array.","ArrayExpression",["210"],"'loadNotes' is defined but never used.","'uuid' is defined but never used.","'Title' is assigned a value but never used.","'AllNotes' is assigned a value but never used.","'AppSidebarButton' is assigned a value but never used.","'AddCategoryButton' is assigned a value but never used.",["208"],["209"],["208"],["209"],"'take' is defined but never used.",["211"],"'CategoryItem' is defined but never used.","'NoteItem' is defined but never used.","'addNote' is defined but never used.","'syncState' is defined but never used.","'moment' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"212","fix":"213"},{"desc":"212","fix":"214"},"Update the dependencies array to be: [handleNoteOptionsClick]",{"range":"215","text":"216"},{"range":"217","text":"216"},[2024,2026],"[handleNoteOptionsClick]",[2120,2122]]