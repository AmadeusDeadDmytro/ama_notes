[{"D:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts":"1","D:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts":"2","D:\\Web\\Pet\\ama_notes\\src\\containers\\Navigation.tsx":"3","D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx":"4","D:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts":"5","D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx":"6","D:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts":"7","D:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx":"8","D:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts":"9","D:\\Web\\Pet\\ama_notes\\src\\componets\\App.tsx":"10","D:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts":"11","D:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts":"12","D:\\Web\\Pet\\ama_notes\\src\\index.tsx":"13","E:\\Web\\Pet\\ama_notes\\src\\index.tsx":"14","E:\\Web\\Pet\\ama_notes\\src\\reducers\\index.ts":"15","E:\\Web\\Pet\\ama_notes\\src\\sagas\\index.ts":"16","E:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx":"17","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx":"18","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx":"19","E:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts":"20","E:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts":"21","E:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts":"22","E:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts":"23","E:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts":"24","E:\\Web\\Pet\\ama_notes\\src\\api\\index.ts":"25","E:\\Web\\Pet\\ama_notes\\src\\constants\\codeMirrorOptions.ts":"26","E:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts":"27","E:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts":"28","E:\\Web\\Pet\\ama_notes\\src\\containers\\App.tsx":"29","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteOptions.tsx":"30","E:\\Web\\Pet\\ama_notes\\src\\constants\\index.ts":"31"},{"size":3180,"mtime":1609785928423,"results":"32","hashOfConfig":"33"},{"size":1497,"mtime":1609694531928,"results":"34","hashOfConfig":"33"},{"size":3230,"mtime":1609787249723,"results":"35","hashOfConfig":"33"},{"size":2737,"mtime":1609856010314,"results":"36","hashOfConfig":"33"},{"size":818,"mtime":1609622652667,"results":"37","hashOfConfig":"33"},{"size":8252,"mtime":1609856062059,"results":"38","hashOfConfig":"33"},{"size":5651,"mtime":1609787691005,"results":"39","hashOfConfig":"33"},{"size":8235,"mtime":1609787205725,"results":"40","hashOfConfig":"33"},{"size":473,"mtime":1609783732431,"results":"41","hashOfConfig":"33"},{"size":1338,"mtime":1609856297958,"results":"42","hashOfConfig":"33"},{"size":1048,"mtime":1609786308827,"results":"43","hashOfConfig":"33"},{"size":1238,"mtime":1609856246554,"results":"44","hashOfConfig":"33"},{"size":767,"mtime":1609362001538,"results":"45","hashOfConfig":"33"},{"size":768,"mtime":1610025048364,"results":"46","hashOfConfig":"47"},{"size":502,"mtime":1609361809731,"results":"48","hashOfConfig":"47"},{"size":1223,"mtime":1609362448208,"results":"49","hashOfConfig":"47"},{"size":12054,"mtime":1610043929397,"results":"50","hashOfConfig":"47"},{"size":9110,"mtime":1610043915368,"results":"51","hashOfConfig":"47"},{"size":2803,"mtime":1610052895049,"results":"52","hashOfConfig":"47"},{"size":1498,"mtime":1609785928906,"results":"53","hashOfConfig":"47"},{"size":6373,"mtime":1610052042433,"results":"54","hashOfConfig":"47"},{"size":818,"mtime":1609622652667,"results":"55","hashOfConfig":"47"},{"size":1099,"mtime":1610041228391,"results":"56","hashOfConfig":"47"},{"size":3302,"mtime":1610042091950,"results":"57","hashOfConfig":"47"},{"size":1249,"mtime":1609362447771,"results":"58","hashOfConfig":"47"},{"size":218,"mtime":1610052836761,"results":"59","hashOfConfig":"47"},{"size":381,"mtime":1610041058569,"results":"60","hashOfConfig":"47"},{"size":1785,"mtime":1610043723546,"results":"61","hashOfConfig":"47"},{"size":1211,"mtime":1610043971617,"results":"62","hashOfConfig":"47"},{"size":2717,"mtime":1610043176175,"results":"63","hashOfConfig":"47"},{"size":156,"mtime":1610042828229,"results":"64","hashOfConfig":"47"},{"filePath":"65","messages":"66","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1j5cugq",{"filePath":"67","messages":"68","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"69","messages":"70","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"71","usedDeprecatedRules":"72"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"78","messages":"79","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"80","messages":"81","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"82","messages":"83","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"84","messages":"85","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"86","messages":"87","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"88","messages":"89","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"90","messages":"91","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"92","messages":"93","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"94"},{"filePath":"95","messages":"96","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},"19u8yaq",{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"102","usedDeprecatedRules":"97"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"105","messages":"106","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"114","messages":"115","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"97"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"97"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"128","messages":"129","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"130","messages":"131","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"127"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\containers\\Navigation.tsx",["137"],"import { ApplicationState, CategoryItem, NoteItem } from 'types'\nimport { addNote, deleteNote, sendNoteToTrash, swapNote, syncState } from 'actions'\nimport { downloadNote, getNoteTitle } from 'helpers'\n\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport styled from 'styled-components'\nimport { v4 as uuid } from 'uuid'\n\ninterface NavigationProps {\n    addNote: (note: NoteItem) => void\n    swapNote: (noteId: string) => void\n    sendNoteToTrash: (noteId: string) => void\n    syncState: (notes: NoteItem[], categories: CategoryItem[]) => void\n    activeNote?: NoteItem\n    notes: NoteItem[]\n    categories: CategoryItem[]\n    syncing: boolean\n}\n\nconst Navigation: React.FC<NavigationProps> = ({ addNote, activeNote, sendNoteToTrash, swapNote, syncState, notes, syncing, categories }) => {\n    const newNoteHandler = () => {\n        const note: NoteItem = {\n            id: uuid(),\n            text: '',\n            created: moment().format(),\n            lastUpdated: moment().format(),\n        }\n\n        if ((activeNote && activeNote.text !== '') || !activeNote) {\n            addNote(note)\n            swapNote(note.id)\n        }\n    }\n\n    const trashNoteHandler = () => {\n        if (activeNote && !activeNote.trash) {\n            sendNoteToTrash(activeNote.id)\n        }\n    }\n\n    const syncNoteHandler = () => {\n        syncState(notes, categories)\n    }\n\n    const downloadHandler = () => {\n        if (activeNote) {\n            downloadNote(getNoteTitle(activeNote.text), activeNote)\n        }\n    }\n\n    return (\n        <NavigationContainer>\n            <NavButton onClick={newNoteHandler}>+ Новая запись</NavButton>\n            <NavButton onClick={trashNoteHandler}>x Удалить запись</NavButton>\n            <NavButton onClick={downloadHandler}>^ Скачать запись</NavButton>\n            <NavButton onClick={syncNoteHandler}>\n                Синхронизировать записи\n                {syncing && 'Синхронизация...'}\n            </NavButton>\n        </NavigationContainer>\n    )\n}\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    syncing: state.syncState.syncing,\n    notes: state.noteState.notes,\n    categories: state.categoryState.categories,\n    activeNote: state.noteState.notes.find((note) => note.id === state.noteState.activeNoteId),\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    addNote: (note: NoteItem) => dispatch(addNote(note)),\n    swapNote: (noteId: string) => dispatch(swapNote(noteId)),\n    sendNoteToTrash: (noteId: string) => dispatch(sendNoteToTrash(noteId)),\n    syncState: (notes: NoteItem[], categories: CategoryItem[]) => dispatch(syncState(notes, categories)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Navigation)\n\nconst NavButton = styled.button`\n    display: block;\n    cursor: pointer;\n    background: transparent;\n    font-weight: 600;\n    border: none;\n    font-size: 1rem;\n\n    &:hover {\n        background: ${Colors.HOVER};\n    }\n`\n\nconst NavigationContainer = styled.div`\n    grid-area: nav;\n    background: ${Colors.BACKGROUND};\n    display: flex;\n`\n",["138","139"],"D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx",["140"],"import 'codemirror/lib/codemirror.css'\nimport 'codemirror/theme/base16-light.css'\nimport 'codemirror/mode/gfm/gfm.js'\nimport 'codemirror/addon/selection/active-line.js'\n\nimport { ApplicationState, NoteItem } from 'types'\n\nimport { Controlled as CodeMirror } from 'react-codemirror2'\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport React from 'react'\nimport { connect } from 'react-redux'\nimport moment from 'moment'\nimport options from 'constants/codeMirrorOptions'\nimport styled from 'styled-components'\nimport { updateNote } from 'actions'\n\ninterface NoteEditorProps {\n    loading: boolean\n    activeNote?: NoteItem\n    updateNote: (note: NoteItem) => void\n}\n\nconst NoteEditor: React.FC<NoteEditorProps> = ({ loading, activeNote, updateNote }) => {\n    if (loading) {\n        return <EmptyEditor>Загрузка...</EmptyEditor>\n    } else if (!activeNote) {\n        return <EmptyEditorCenter />\n    } else {\n        return (\n            <Editor\n                className=\"mousetrap\"\n                value={activeNote.text}\n                options={options}\n                editorDidMount={(editor) => {\n                    editor.focus()\n                }}\n                onBeforeChange={(editor, data, value) => {\n                    updateNote({\n                        id: activeNote.id,\n                        text: value,\n                        created: activeNote.created,\n                        lastUpdated: moment().format(),\n                    })\n                }}\n                onChange={(editor, data, value) => {\n                    editor.focus()\n                }}\n            />\n        )\n    }\n}\n\nconst mapStateToProps = (state: ApplicationState) => ({\n    loading: state.noteState.loading,\n    activeNote: state.noteState.notes.find((note) => note.id === state.noteState.activeNoteId),\n})\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    updateNote: (note: NoteItem) => dispatch(updateNote(note)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteEditor)\n\nconst EmptyEditor = styled.div`\n    grid-area: editor;\n    max-height: calc(100vh - 25px);\n    overflow-y: auto;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst EmptyEditorCenter = styled(EmptyEditor)`\n    display: flex;\n    align-items: center;\n    justify-content: center;\n`\n\nconst Editor = styled(CodeMirror)`\n    grid-area: editor;\n\n    .CodeMirror {\n        -webkit-font-smoothing: subpixel-antialiased;\n        height: 100%;\n        font-family: Menlo, Monaco, monospace;\n        font-weight: 500;\n        font-size: 15px;\n        line-height: 1.5;\n    }\n\n    .CodeMirror-activeline-background {\n        background: rgba(0, 0, 0, 0.05) !important;\n    }\n`\n","D:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts",["141"],"D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx",["142","143"],"D:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts",["144","145"],"D:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx",["146","147","148","149"],"D:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\componets\\App.tsx",["150"],"D:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\index.tsx",[],["151","152"],"E:\\Web\\Pet\\ama_notes\\src\\index.tsx",[],["153","154"],"E:\\Web\\Pet\\ama_notes\\src\\reducers\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\sagas\\index.ts",["155"],"import { all, put, take, takeLatest } from 'redux-saga/effects'\nimport { loadCategoriesError, loadCategoriesSuccess, loadNotesError, loadNotesSuccess, syncStateError, syncStateSuccess } from 'actions'\nimport { requestCategories, requestNotes, saveState } from 'api'\n\nimport { Actions } from 'constants/enums'\nimport { SyncStateAction } from 'types/index'\n\nfunction* fetchNotes() {\n    try {\n        const notes = yield requestNotes()\n        yield put(loadNotesSuccess(notes))\n    } catch (error) {\n        yield put(loadNotesError(error))\n    }\n}\n\nfunction* fetchCategories() {\n    try {\n        const categories = yield requestCategories()\n        yield put(loadCategoriesSuccess(categories))\n    } catch (error) {\n        yield put(loadCategoriesError(error))\n    }\n}\n\nfunction* postState({ payload: { notes, categories } }: SyncStateAction) {\n    try {\n        yield saveState(notes, categories)\n\n        yield put(syncStateSuccess())\n    } catch (error) {\n        yield put(syncStateError(error))\n    }\n}\n\nexport function* allSaga() {\n    yield all([takeLatest(Actions.LOAD_NOTES, fetchNotes), takeLatest(Actions.LOAD_CATEGORIES, fetchCategories), takeLatest(Actions.SYNC_STATE, postState)])\n}\n\nexport default allSaga\n","E:\\Web\\Pet\\ama_notes\\src\\containers\\AppSidebar.tsx",["156","157","158","159","160"],"E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx",["161"],"import { ApplicationState, CategoryItem, NoteItem } from 'types'\nimport React, { useEffect, useRef, useState } from 'react'\nimport { addCategoryToNote, addNote, pruneNotes, swapCategory, swapNote } from 'actions'\nimport { getNoteTitle, sortByLastUpdated } from 'helpers'\n\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport { Folders } from 'constants/enums'\nimport { MoreHorizontal } from 'react-feather'\nimport NoteOptions from 'containers/NoteOptions'\nimport { connect } from 'react-redux'\nimport { folderMap } from 'constants/index'\nimport styled from 'styled-components'\n\ninterface NoteListProps {\n    activeFolder: string\n    activeCategoryId: string\n    activeCategory?: CategoryItem\n    activeNoteId: string\n    filteredNotes: NoteItem[]\n    filteredCategories: CategoryItem[]\n    swapNote: (noteId: string) => void\n    swapCategory: (category: string) => void\n    pruneNotes: () => void\n    addCategoryToNote: (categoryId: string, noteId: string) => void\n}\n\nconst NoteList: React.FC<NoteListProps> = ({\n    activeFolder,\n    activeCategory,\n    activeCategoryId,\n    activeNoteId,\n    filteredNotes,\n    filteredCategories,\n    swapNote,\n    swapCategory,\n    pruneNotes,\n    addCategoryToNote,\n}) => {\n    const [noteOptionsId, setNoteOptionsId] = useState('')\n    const node = useRef<HTMLDivElement>(null)\n\n    const handleNoteOptionsClick = (event: MouseEvent | React.MouseEvent<HTMLDivElement> | React.ChangeEvent<HTMLSelectElement>, noteId: string = '') => {\n        event.stopPropagation()\n\n        if (node.current) {\n            if (node.current.contains(event.target as HTMLDivElement)) return\n        }\n\n        if (!noteOptionsId) {\n            setNoteOptionsId(noteId)\n        } else if (noteOptionsId !== noteId) {\n            setNoteOptionsId(noteId)\n        } else {\n            setNoteOptionsId('')\n        }\n    }\n\n    useEffect(() => {\n        document.addEventListener('mousedown', handleNoteOptionsClick)\n\n        return () => {\n            document.removeEventListener('mousedown', handleNoteOptionsClick)\n        }\n    })\n\n    return (\n        <NoteSidebar>\n            <NoteSidebarHeader>{activeFolder === 'CATEGORY' ? activeCategory && activeCategory.name : folderMap[activeFolder]}</NoteSidebarHeader>\n            <NoteListContainer>\n                {filteredNotes.map((note) => {\n                    const noteTitle = getNoteTitle(note.text)\n\n                    return (\n                        <NoteEach\n                            key={note.id}\n                            active={note.id === activeNoteId}\n                            onClick={() => {\n                                if (note.id !== activeNoteId) {\n                                    swapNote(note.id)\n                                    pruneNotes()\n                                }\n                            }}\n                        >\n                            {noteTitle}\n                            <NoteOptionsDiv active={noteOptionsId === note.id} onClick={(event) => handleNoteOptionsClick(event, note.id)}>\n                                <MoreHorizontal size={15} />\n                            </NoteOptionsDiv>\n                            {noteOptionsId === note.id && (\n                                <NoteOptionsContext ref={node}>\n                                    <ContextActionTitle>Переместить в категорию</ContextActionTitle>\n\n                                    <SelectElement\n                                        defaultValue=\"\"\n                                        onChange={(event) => {\n                                            addCategoryToNote(event.target.value, note.id)\n\n                                            if (event.target.value !== activeCategoryId) {\n                                                swapCategory(event.target.value)\n                                                swapNote(note.id)\n                                            }\n\n                                            setNoteOptionsId('')\n                                        }}\n                                    >\n                                        <SelectElementOption disabled value=\"\">\n                                            Выберите категорию\n                                        </SelectElementOption>\n\n                                        {filteredCategories\n                                            .filter((category) => category.id !== note.category)\n                                            .map((category) => (\n                                                <SelectElementOption key={category.id} value={category.id}>\n                                                    {category.name}\n                                                </SelectElementOption>\n                                            ))}\n                                        {note.category && (\n                                            <SelectElementOption key=\"none\" value=\"\">\n                                                Удалить категорию записи\n                                            </SelectElementOption>\n                                        )}\n                                    </SelectElement>\n                                    <NoteOptions clickedNote={note} />\n                                </NoteOptionsContext>\n                            )}\n                        </NoteEach>\n                    )\n                })}\n            </NoteListContainer>\n        </NoteSidebar>\n    )\n}\n\nconst mapStateToProps = (state: ApplicationState) => {\n    const { noteState, categoryState } = state\n    let filteredNotes: NoteItem[]\n\n    if (noteState.activeFolder === Folders.CATEGORY) {\n        filteredNotes = noteState.notes.filter((note) => !note.trash && note.category === noteState.activeCategoryId)\n    } else if (noteState.activeFolder === Folders.FAVORITES) {\n        filteredNotes = noteState.notes.filter((note) => !note.trash && note.favorite)\n    } else if (noteState.activeFolder === Folders.TRASH) {\n        filteredNotes = noteState.notes.filter((note) => note.trash)\n    } else {\n        filteredNotes = noteState.notes.filter((note) => !note.trash)\n    }\n\n    filteredNotes.sort(sortByLastUpdated)\n\n    return {\n        activeFolder: noteState.activeFolder,\n        activeCategoryId: noteState.activeCategoryId,\n        activeCategory: categoryState.categories.find((category) => category.id === noteState.activeCategoryId),\n        activeNoteId: noteState.activeNoteId,\n        notes: noteState.notes,\n        filteredNotes,\n        activeNote: state.noteState.notes.find((note) => note.id === state.noteState.activeNoteId),\n        filteredCategories: categoryState.categories.filter((category) => category.id !== noteState.activeCategoryId),\n    }\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    addNote: (note: NoteItem) => dispatch(addNote(note)),\n    swapNote: (noteId: string) => dispatch(swapNote(noteId)),\n    swapCategory: (categoryId: string) => dispatch(swapCategory(categoryId)),\n    pruneNotes: () => dispatch(pruneNotes()),\n    addCategoryToNote: (categoryId: string, noteId: string) => dispatch(addCategoryToNote(categoryId, noteId)),\n})\n\nexport default connect(mapStateToProps, mapDispatchToProps)(NoteList)\n\nconst NoteSidebarHeader = styled.div``\n\nconst Searchbar = styled.input`\n    -webkit-appearance: textfield;\n    width: 100%;\n    display: flex;\n    align-items: center;\n    font-size: 1rem;\n    padding: 1rem;\n    height: 2.5rem;\n    line-height: 2.5rem;\n    background-color: white;\n    outline: none;\n    border-radius: 0;\n    border-width: 1px;\n    border-style: solid;\n    border-image: initial;\n    border-color: ${Colors.A_COLOR_TWO};\n`\n\nconst NoteSidebar = styled.aside`\n    grid-area: note-sidebar;\n    background: ${Colors.A_COLOR_TWO};\n    border-right: 1px solid ${Colors.A_COLOR_NINE};\n`\n\nconst NoteListContainer = styled.div``\n\nconst NoteEach = styled.div<{ active: boolean }>`\n    position: relative;\n    cursor: pointer;\n    padding: 0.5rem;\n    border-bottom: 1px solid ${Colors.A_COLOR_EIGHT};\n    background: ${({ active }) => active && Colors.A_COLOR_TWO};\n    font-weight: ${({ active }) => active && 600};\n    display: flex;\n    align-items: center;\n    justify-content: space-between;\n\n    &:hover {\n        background: ${Colors.A_COLOR_NINE};\n    }\n`\n\nconst NoteOptionsDiv = styled.div<{ active: boolean }>`\n    color: ${Colors.A_COLOR_FOUR};\n    padding: 0.5rem;\n    z-index: 1;\n    cursor: pointer;\n`\n\nconst NoteOptionsContext = styled.div`\n    cursor: default;\n    position: absolute;\n    color: ${Colors.A_COLOR_FOUR};\n    top: 32px;\n    left: 200px;\n    min-width: 350px;\n    padding: 1rem;\n    background: white;\n    border: 1px solid ${Colors.A_COLOR_TWO};\n    z-index: 5;\n    box-shadow: 2px 3px 10px rgba(0, 0, 0, 0.1);\n`\n\nconst ContextActionTitle = styled.h2`\n    margin-top: 0;\n    font-size: 1rem;\n`\n\nconst SelectElement = styled.select`\n    -webkit-appearance: none;\n    font-size: 1rem;\n    padding: 0.5rem;\n    width: 100%;\n`\n\nconst SelectElementOption = styled.option``\n","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx",["162"],"E:\\Web\\Pet\\ama_notes\\src\\reducers\\categoryReducer.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts",["163","164"],"E:\\Web\\Pet\\ama_notes\\src\\reducers\\syncReducer.ts",["165"],"import { SyncState, SyncStateActionTypes } from 'types'\r\n\r\nimport { Actions } from 'constants/enums'\r\n\r\nconst initialState = {\r\n    syncing: false,\r\n    error: '',\r\n}\r\n\r\nconst syncReducer = (state = initialState, action: SyncStateActionTypes): SyncState => {\r\n    switch (action.type) {\r\n        default:\r\n        case Actions.SYNC_STATE:\r\n            return {\r\n                ...state,\r\n                syncing: true,\r\n            }\r\n        case Actions.SYNC_STATE_SUCCESS:\r\n            return {\r\n                ...state,\r\n                syncing: false,\r\n            }\r\n        case Actions.SYNC_STATE_ERROR:\r\n            return {\r\n                ...state,\r\n                syncing: false,\r\n                error: action.payload,\r\n            }\r\n            return state\r\n    }\r\n}\r\n\r\nexport default syncReducer\r\n","E:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\api\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\constants\\codeMirrorOptions.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts",[],["166","167"],"E:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts",[],"E:\\Web\\Pet\\ama_notes\\src\\containers\\App.tsx",["168"],"import React, { useEffect } from 'react'\nimport { loadCategories, loadNotes } from 'actions'\n\nimport AppSidebar from 'containers/AppSidebar'\nimport Colors from 'styles/colors'\nimport { Dispatch } from 'redux'\nimport NoteEditor from 'containers/NoteEditor'\nimport NoteList from 'containers/NoteList'\nimport { connect } from 'react-redux'\nimport styled from 'styled-components'\n\ninterface AppProps {\n    loadNotes: () => void\n    loadCategories: () => void\n}\n\nconst App: React.FC<AppProps> = ({ loadNotes, loadCategories }) => {\n    useEffect(() => {\n        loadNotes()\n    }, [loadNotes])\n\n    useEffect(() => {\n        loadCategories()\n    }, [loadCategories])\n\n    return (\n        <AppContainer>\n            <AppSidebar />\n            <NoteList />\n            <NoteEditor />\n        </AppContainer>\n    )\n}\n\nconst mapDispatchToProps = (dispatch: Dispatch) => ({\n    loadNotes: () => dispatch(loadNotes()),\n    loadCategories: () => dispatch(loadCategories()),\n})\n\nexport default connect(null, mapDispatchToProps)(App)\n\nconst AppContainer = styled.div`\n    display: grid;\n    grid-template-areas: 'app-sidebar note-sidebar editor editor';\n    grid-template-columns: 175px 300px auto;\n    min-height: 100vh;\n`\n","E:\\Web\\Pet\\ama_notes\\src\\containers\\NoteOptions.tsx",[],"E:\\Web\\Pet\\ama_notes\\src\\constants\\index.ts",[],{"ruleId":"169","severity":1,"message":"170","line":2,"column":19,"nodeType":"171","messageId":"172","endLine":2,"endColumn":29},{"ruleId":"173","replacedBy":"174"},{"ruleId":"175","replacedBy":"176"},{"ruleId":"169","severity":1,"message":"177","line":9,"column":8,"nodeType":"171","messageId":"172","endLine":9,"endColumn":14},{"ruleId":"178","severity":1,"message":"179","line":29,"column":13,"nodeType":"180","messageId":"181","endLine":29,"endColumn":25},{"ruleId":"169","severity":1,"message":"182","line":45,"column":15,"nodeType":"171","messageId":"172","endLine":45,"endColumn":30},{"ruleId":"183","severity":1,"message":"184","line":54,"column":8,"nodeType":"185","endLine":54,"endColumn":10,"suggestions":"186"},{"ruleId":"169","severity":1,"message":"187","line":4,"column":10,"nodeType":"171","messageId":"172","endLine":4,"endColumn":19},{"ruleId":"169","severity":1,"message":"188","line":5,"column":16,"nodeType":"171","messageId":"172","endLine":5,"endColumn":20},{"ruleId":"169","severity":1,"message":"189","line":159,"column":7,"nodeType":"171","messageId":"172","endLine":159,"endColumn":12},{"ruleId":"169","severity":1,"message":"190","line":164,"column":7,"nodeType":"171","messageId":"172","endLine":164,"endColumn":15},{"ruleId":"169","severity":1,"message":"191","line":182,"column":7,"nodeType":"171","messageId":"172","endLine":182,"endColumn":23},{"ruleId":"169","severity":1,"message":"192","line":189,"column":7,"nodeType":"171","messageId":"172","endLine":189,"endColumn":24},{"ruleId":"169","severity":1,"message":"177","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":14},{"ruleId":"173","replacedBy":"193"},{"ruleId":"175","replacedBy":"194"},{"ruleId":"173","replacedBy":"195"},{"ruleId":"175","replacedBy":"196"},{"ruleId":"169","severity":1,"message":"197","line":1,"column":20,"nodeType":"171","messageId":"172","endLine":1,"endColumn":24},{"ruleId":"169","severity":1,"message":"198","line":206,"column":7,"nodeType":"171","messageId":"172","endLine":206,"endColumn":26},{"ruleId":"169","severity":1,"message":"189","line":258,"column":7,"nodeType":"171","messageId":"172","endLine":258,"endColumn":12},{"ruleId":"169","severity":1,"message":"190","line":263,"column":7,"nodeType":"171","messageId":"172","endLine":263,"endColumn":15},{"ruleId":"169","severity":1,"message":"191","line":281,"column":7,"nodeType":"171","messageId":"172","endLine":281,"endColumn":23},{"ruleId":"169","severity":1,"message":"199","line":286,"column":7,"nodeType":"171","messageId":"172","endLine":286,"endColumn":16},{"ruleId":"169","severity":1,"message":"200","line":174,"column":7,"nodeType":"171","messageId":"172","endLine":174,"endColumn":16},{"ruleId":"169","severity":1,"message":"177","line":9,"column":8,"nodeType":"171","messageId":"172","endLine":9,"endColumn":14},{"ruleId":"169","severity":1,"message":"187","line":4,"column":10,"nodeType":"171","messageId":"172","endLine":4,"endColumn":19},{"ruleId":"169","severity":1,"message":"188","line":6,"column":16,"nodeType":"171","messageId":"172","endLine":6,"endColumn":20},{"ruleId":"178","severity":1,"message":"179","line":29,"column":13,"nodeType":"180","messageId":"181","endLine":29,"endColumn":25},{"ruleId":"173","replacedBy":"201"},{"ruleId":"175","replacedBy":"202"},{"ruleId":"169","severity":1,"message":"177","line":5,"column":8,"nodeType":"171","messageId":"172","endLine":5,"endColumn":14},"@typescript-eslint/no-unused-vars","'deleteNote' is defined but never used.","Identifier","unusedVar","no-native-reassign",["203"],"no-negated-in-lhs",["204"],"'Colors' is defined but never used.","no-unreachable","Unreachable code.","ReturnStatement","unreachableCode","'filteredResults' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'handleNoteOptionsClick'. Either include it or remove the dependency array.","ArrayExpression",["205"],"'loadNotes' is defined but never used.","'uuid' is defined but never used.","'Title' is assigned a value but never used.","'AllNotes' is assigned a value but never used.","'AppSidebarButton' is assigned a value but never used.","'AddCategoryButton' is assigned a value but never used.",["203"],["204"],["203"],["204"],"'take' is defined but never used.","'AppSidebarActionsH1' is assigned a value but never used.","'AddButton' is assigned a value but never used.","'Searchbar' is assigned a value but never used.",["203"],["204"],"no-global-assign","no-unsafe-negation",{"desc":"206","fix":"207"},"Update the dependencies array to be: [handleNoteOptionsClick]",{"range":"208","text":"209"},[2024,2026],"[handleNoteOptionsClick]"]