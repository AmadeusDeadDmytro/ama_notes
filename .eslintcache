[{"D:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts":"1","D:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts":"2","D:\\Web\\Pet\\ama_notes\\src\\constants\\codeMirrorOptions.ts":"3","D:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts":"4","D:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts":"5","D:\\Web\\Pet\\ama_notes\\src\\reducers\\index.ts":"6","D:\\Web\\Pet\\ama_notes\\src\\componets\\App.tsx":"7","D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx":"8","D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx":"9","D:\\Web\\Pet\\ama_notes\\src\\index.tsx":"10","D:\\Web\\Pet\\ama_notes\\src\\sagas\\index.ts":"11","D:\\Web\\Pet\\ama_notes\\src\\containers\\Navigation.tsx":"12","D:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts":"13","D:\\Web\\Pet\\ama_notes\\src\\api\\index.ts":"14","D:\\Web\\Pet\\ama_notes\\src\\containers\\CategoryList.tsx":"15","D:\\Web\\Pet\\ama_notes\\src\\helpers\\hooks.ts":"16"},{"size":3255,"mtime":1609252429767,"results":"17","hashOfConfig":"18"},{"size":945,"mtime":1609252391431,"results":"19","hashOfConfig":"18"},{"size":191,"mtime":1609074042912,"results":"20","hashOfConfig":"18"},{"size":748,"mtime":1609229972677,"results":"21","hashOfConfig":"18"},{"size":439,"mtime":1609228689403,"results":"22","hashOfConfig":"18"},{"size":247,"mtime":1609182502081,"results":"23","hashOfConfig":"18"},{"size":763,"mtime":1609264343303,"results":"24","hashOfConfig":"18"},{"size":2778,"mtime":1609265510547,"results":"25","hashOfConfig":"18"},{"size":2059,"mtime":1609264194879,"results":"26","hashOfConfig":"18"},{"size":808,"mtime":1609218386085,"results":"27","hashOfConfig":"18"},{"size":844,"mtime":1609229388394,"results":"28","hashOfConfig":"18"},{"size":2958,"mtime":1609266256694,"results":"29","hashOfConfig":"18"},{"size":253,"mtime":1609264265913,"results":"30","hashOfConfig":"18"},{"size":632,"mtime":1609229126783,"results":"31","hashOfConfig":"18"},{"size":1140,"mtime":1609264286507,"results":"32","hashOfConfig":"18"},{"size":831,"mtime":1609266401340,"results":"33","hashOfConfig":"18"},{"filePath":"34","messages":"35","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"36"},"1j5cugq",{"filePath":"37","messages":"38","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"39","messages":"40","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"47"},{"filePath":"48","messages":"49","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"58","messages":"59","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"60","messages":"61","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"D:\\Web\\Pet\\ama_notes\\src\\reducers\\noteReducer.ts",["68","69"],"import { ActionType } from 'constants/enums'\nimport { NoteState } from 'types'\nimport { loadNotes } from './../actions/index'\nimport { v4 as uuid } from 'uuid'\n\nconst initialState: NoteState = {\n    notes: [],\n    active: '',\n    error: '',\n    loading: true,\n    syncing: false,\n}\n\nconst noteReducer = (state = initialState, action): NoteState => {\n    switch (action.type) {\n        case ActionType.PRUNE_NOTES:\n            return {\n                ...state,\n                notes: state.notes.filter((note) => note.text !== '' || note.id === state.active),\n            }\n        case ActionType.LOAD_NOTES:\n            return initialState\n        case ActionType.LOAD_NOTES_SUCCESS:\n            return {\n                ...state,\n                notes: action.payload,\n                active: action.payload.length > 0 ? action.payload[0].id : '',\n                loading: false,\n            }\n        case ActionType.LOAD_NOTES_ERROR:\n            return {\n                ...state,\n                loading: false,\n                error: action.payload,\n            }\n        case ActionType.SWAP_NOTE:\n            return {\n                ...state,\n                active: action.payload,\n            }\n        case ActionType.ADD_NOTE:\n            return {\n                ...state,\n                notes: [...state.notes, action.payload],\n            }\n        case ActionType.UPDATE_NOTE:\n            return {\n                ...state,\n                notes: state.notes.map((note) => {\n                    if (note.id === action.payload.id) {\n                        return {\n                            id: note.id,\n                            text: action.payload.text,\n                            created: '',\n                            lastUpdated: '',\n                        }\n                    } else {\n                        return note\n                    }\n                }),\n            }\n        case ActionType.DELETE_NOTE:\n            const deletedNoteIndex = state.notes.findIndex((note) => note.id === action.payload)\n            let newActiveNoteId: string\n\n            if (deletedNoteIndex === 0) {\n                if (state.notes.find((note, i) => i === 1)) {\n                    newActiveNoteId = state.notes[deletedNoteIndex + 1].id\n                } else {\n                    newActiveNoteId = ''\n                }\n            } else if (state.notes[deletedNoteIndex - 1]) {\n                newActiveNoteId = state.notes[deletedNoteIndex - 1].id\n            } else {\n                newActiveNoteId = ''\n            }\n\n            return {\n                ...state,\n                notes: state.notes.filter((note) => note.id !== action.payload),\n                active: newActiveNoteId,\n            }\n        case ActionType.SYNC_STATE:\n            return {\n                ...state,\n                syncing: true,\n            }\n        case ActionType.SYNC_STATE_SUCCESS:\n            return {\n                ...state,\n                syncing: false,\n            }\n        case ActionType.SYNC_STATE_ERROR:\n            return {\n                ...state,\n                syncing: false,\n                error: action.payload,\n            }\n        default:\n            return state\n    }\n}\n\nexport default noteReducer\n","D:\\Web\\Pet\\ama_notes\\src\\helpers\\index.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\constants\\codeMirrorOptions.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\actions\\index.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\constants\\enums.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\reducers\\index.ts",[],["70","71"],"D:\\Web\\Pet\\ama_notes\\src\\componets\\App.tsx",["72"],"D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteEditor.tsx",[],"D:\\Web\\Pet\\ama_notes\\src\\containers\\NoteList.tsx",[],"D:\\Web\\Pet\\ama_notes\\src\\index.tsx",[],"D:\\Web\\Pet\\ama_notes\\src\\sagas\\index.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\containers\\Navigation.tsx",[],"D:\\Web\\Pet\\ama_notes\\src\\styles\\colors.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\api\\index.ts",[],"D:\\Web\\Pet\\ama_notes\\src\\containers\\CategoryList.tsx",[],"D:\\Web\\Pet\\ama_notes\\src\\helpers\\hooks.ts",["73","74"],{"ruleId":"75","severity":1,"message":"76","line":3,"column":10,"nodeType":"77","messageId":"78","endLine":3,"endColumn":19},{"ruleId":"75","severity":1,"message":"79","line":4,"column":16,"nodeType":"77","messageId":"78","endLine":4,"endColumn":20},{"ruleId":"80","replacedBy":"81"},{"ruleId":"82","replacedBy":"83"},{"ruleId":"75","severity":1,"message":"84","line":2,"column":8,"nodeType":"77","messageId":"78","endLine":2,"endColumn":14},{"ruleId":"75","severity":1,"message":"85","line":5,"column":8,"nodeType":"77","messageId":"78","endLine":5,"endColumn":17},{"ruleId":"86","severity":1,"message":"87","line":23,"column":8,"nodeType":"88","endLine":23,"endColumn":19,"suggestions":"89"},"@typescript-eslint/no-unused-vars","'loadNotes' is defined but never used.","Identifier","unusedVar","'uuid' is defined but never used.","no-native-reassign",["90"],"no-negated-in-lhs",["91"],"'Colors' is defined but never used.","'mousetrap' is defined but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'delay'. Either include it or remove the dependency array.","ArrayExpression",["92"],"no-global-assign","no-unsafe-negation",{"desc":"93","fix":"94"},"Update the dependencies array to be: [delay, immediate]",{"range":"95","text":"96"},[549,560],"[delay, immediate]"]